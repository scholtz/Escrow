{
    "name": "Escrow",
    "structs": {
        "EscrowInstance": [
            {
                "name": "createdTime",
                "type": "uint64"
            },
            {
                "name": "rescueTime",
                "type": "uint64"
            },
            {
                "name": "tokenId",
                "type": "uint64"
            },
            {
                "name": "amount",
                "type": "uint64"
            },
            {
                "name": "account",
                "type": "address"
            },
            {
                "name": "secretHash",
                "type": "byte[32]"
            }
        ]
    },
    "methods": [
        {
            "name": "create",
            "args": [
                {
                    "type": "txn",
                    "name": "txnDeposit",
                    "desc": "The deposit of the asset"
                },
                {
                    "type": "uint64",
                    "name": "rescueDelay",
                    "desc": "The number seconds from the current time after the tx can be canceled"
                },
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": "Hash of the secret in keccak256"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "makeHash",
            "args": [
                {
                    "type": "byte[]",
                    "name": "secret",
                    "desc": "The secret"
                }
            ],
            "returns": {
                "type": "byte[]",
                "desc": "Hash of the secret"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Return hash of the secret. Readonly method using the simulate method is for free.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getEscrow",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": ""
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,address,byte[32])",
                "struct": "EscrowInstance"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "EscrowInstance by secret",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "latestTimestamp",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "Time as blockchain sees it"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current time",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": "Hash of the secret in keccak256"
                },
                {
                    "type": "byte[]",
                    "name": "secret",
                    "desc": "Secret"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw from escrow with known password",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "cancel",
            "args": [
                {
                    "type": "byte[32]",
                    "name": "secretHash",
                    "desc": "Hash of the secret in keccak256"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "After the time has passed, anyone can call this method to return funds to the original sender of the escrow account",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optInToASA",
            "args": [
                {
                    "type": "pay",
                    "name": "txnDeposit",
                    "desc": "Deposit tx"
                },
                {
                    "type": "uint64",
                    "name": "assetId",
                    "desc": "Assset id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Anyone can optin this contract to his ASA if he deposits MBR",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "adminWithdrawable",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetId",
                    "desc": "Asset"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Shows the current withdrawable amount for the admin",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "adminWithdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetId",
                    "desc": "Asset"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Method to exctract excess assets from smart contract address by the admin",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "escrows": {
                    "keyType": "byte[32]",
                    "valueType": "EscrowInstance",
                    "desc": "List of all escrows",
                    "prefix": "ZQ=="
                },
                "allDeposits": {
                    "keyType": "uint64",
                    "valueType": "uint64",
                    "desc": "All deposits of all escrows. Deployer of the contract can request any staking rewards accured to any of the assets excess of the all deposits",
                    "prefix": "ZA=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        600
                    ],
                    "errorMessage": "Asset is already opted in"
                },
                {
                    "pc": [
                        407,
                        471,
                        497,
                        538,
                        646,
                        662,
                        693,
                        709,
                        733
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        382
                    ],
                    "errorMessage": "Deposit must be asset transfer or payment"
                },
                {
                    "pc": [
                        379
                    ],
                    "errorMessage": "Deposit should be positive number"
                },
                {
                    "pc": [
                        505
                    ],
                    "errorMessage": "Escrow can be redeemed with password up to the rescue time"
                },
                {
                    "pc": [
                        311
                    ],
                    "errorMessage": "Escrow with the same id already exists"
                },
                {
                    "pc": [
                        547
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        98,
                        119,
                        140,
                        165,
                        180,
                        198,
                        215,
                        234,
                        261
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        586
                    ],
                    "errorMessage": "Opt in fee to cover MBR"
                },
                {
                    "pc": [
                        329,
                        361
                    ],
                    "errorMessage": "Receiver must be the escrow app"
                },
                {
                    "pc": [
                        576
                    ],
                    "errorMessage": "Receiver of the optin fee must be the current smart contract"
                },
                {
                    "pc": [
                        337
                    ],
                    "errorMessage": "Sender of deposit must be the same as the sender of the app call"
                },
                {
                    "pc": [
                        545
                    ],
                    "errorMessage": "The escrow cannot be canceled yet"
                },
                {
                    "pc": [
                        487,
                        535
                    ],
                    "errorMessage": "The escrow does not exists"
                },
                {
                    "pc": [
                        494
                    ],
                    "errorMessage": "The password is not correct"
                },
                {
                    "pc": [
                        634,
                        639,
                        681,
                        686
                    ],
                    "errorMessage": "account funded"
                },
                {
                    "pc": [
                        656,
                        703
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        289
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        101,
                        122,
                        143,
                        168,
                        183,
                        201,
                        218,
                        237,
                        264
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        153
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDQgOAogICAgYnl0ZWNibG9jayAiZCIgMHgxNTFmN2M3NSAiZSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxNAogICAgcHVzaGJ5dGVzcyAweDI2YmYxMzcwIDB4MzYyZDQ3ZDcgMHhkOWI2NjNmMyAweDY0Y2NkOTMwIDB4MTFmOTI3ZDAgMHhhOGM3ZmIyMCAweDhhYjFjMTYwIDB4NjRkMmQ3ODIgMHhjODFlMjI4ZCAvLyBtZXRob2QgImNyZWF0ZSh0eG4sdWludDY0LGJ5dGVbMzJdKXZvaWQiLCBtZXRob2QgIm1ha2VIYXNoKGJ5dGVbXSlieXRlW10iLCBtZXRob2QgImdldEVzY3JvdyhieXRlWzMyXSkodWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LGFkZHJlc3MsYnl0ZVszMl0pIiwgbWV0aG9kICJsYXRlc3RUaW1lc3RhbXAoKXVpbnQ2NCIsIG1ldGhvZCAid2l0aGRyYXcoYnl0ZVszMl0sYnl0ZVtdKXZvaWQiLCBtZXRob2QgImNhbmNlbChieXRlWzMyXSl2b2lkIiwgbWV0aG9kICJvcHRJblRvQVNBKHBheSx1aW50NjQpdm9pZCIsIG1ldGhvZCAiYWRtaW5XaXRoZHJhd2FibGUodWludDY0KXVpbnQ2NCIsIG1ldGhvZCAiYWRtaW5XaXRoZHJhdyh1aW50NjQpdWludDY0IgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVfcm91dGVAMyBtYWluX21ha2VIYXNoX3JvdXRlQDQgbWFpbl9nZXRFc2Nyb3dfcm91dGVANSBtYWluX2xhdGVzdFRpbWVzdGFtcF9yb3V0ZUA2IG1haW5fd2l0aGRyYXdfcm91dGVANyBtYWluX2NhbmNlbF9yb3V0ZUA4IG1haW5fb3B0SW5Ub0FTQV9yb3V0ZUA5IG1haW5fYWRtaW5XaXRoZHJhd2FibGVfcm91dGVAMTAgbWFpbl9hZG1pbldpdGhkcmF3X3JvdXRlQDExCgptYWluX2FmdGVyX2lmX2Vsc2VAMTg6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX2FkbWluV2l0aGRyYXdfcm91dGVAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjA0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjA0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhZG1pbldpdGhkcmF3CiAgICBpdG9iCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FkbWluV2l0aGRyYXdhYmxlX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE4NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE4NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgYWRtaW5XaXRoZHJhd2FibGUKICAgIGl0b2IKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fb3B0SW5Ub0FTQV9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE2MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTYwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBvcHRJblRvQVNBCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NhbmNlbF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE0MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE0MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgY2FuY2VsCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX3dpdGhkcmF3X3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTIxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTIxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiB3aXRoZHJhdwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9sYXRlc3RUaW1lc3RhbXBfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMTAKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgbGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldEVzY3Jvd19yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgZ2V0RXNjcm93CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX21ha2VIYXNoX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6ODkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo4OQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgbWFrZUhhc2gKICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZV9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjQ0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo0NAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgY3JlYXRlCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxNDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNwogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTgKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cuY3JlYXRlKHR4bkRlcG9zaXQ6IHVpbnQ2NCwgcmVzY3VlRGVsYXk6IHVpbnQ2NCwgc2VjcmV0SGFzaDogYnl0ZXMpIC0+IHZvaWQ6CmNyZWF0ZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo0NC00NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBjcmVhdGUodHhuRGVwb3NpdDogZ3R4bi5UcmFuc2FjdGlvbiwgcmVzY3VlRGVsYXk6IHVpbnQ2NCwgc2VjcmV0SGFzaDogYXJjNC5TdGF0aWNCeXRlczwzMj4pOiB2b2lkIHsKICAgIHByb3RvIDMgMAogICAgaW50Y18xIC8vIDAKICAgIGR1cAogICAgcHVzaGJ5dGVzICIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NDYKICAgIC8vIGxldCB0b2tlbklkOiB1aW50NjQgPSAwCiAgICBpbnRjXzEgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjQ3LTQ4CiAgICAvLyBsZXQgYW1vdW50OiB1aW50NjQgPSAwCiAgICAvLyBsZXQgZGVwb3NpdElzVmFsaWQ6IGJvb2xlYW4gPSBmYWxzZQogICAgZHVwbiAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzEKICAgIC8vIHB1YmxpYyBlc2Nyb3dzID0gQm94TWFwPGFyYzQuU3RhdGljQnl0ZXM8MzI+LCBFc2Nyb3dJbnN0YW5jZT4oeyBrZXlQcmVmaXg6ICdlJyB9KQogICAgYnl0ZWNfMiAvLyAiZSIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo0OQogICAgLy8gYXNzZXJ0KHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS5leGlzdHMgPT09IGZhbHNlLCAnRXNjcm93IHdpdGggdGhlIHNhbWUgaWQgYWxyZWFkeSBleGlzdHMnKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gRXNjcm93IHdpdGggdGhlIHNhbWUgaWQgYWxyZWFkeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo1MAogICAgLy8gaWYgKHR4bkRlcG9zaXQudHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQpIHsKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgVHlwZUVudW0KICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBieiBjcmVhdGVfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NTEKICAgIC8vIGFzc2VydCh0eG5EZXBvc2l0LnJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywgJ1JlY2VpdmVyIG11c3QgYmUgdGhlIGVzY3JvdyBhcHAnKQogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gUmVjZWl2ZXIgbXVzdCBiZSB0aGUgZXNjcm93IGFwcAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjUyCiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5zZW5kZXIgPT09IFR4bi5zZW5kZXIsICdTZW5kZXIgb2YgZGVwb3NpdCBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBzZW5kZXIgb2YgdGhlIGFwcCBjYWxsJykKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIFNlbmRlciBvZiBkZXBvc2l0IG11c3QgYmUgdGhlIHNhbWUgYXMgdGhlIHNlbmRlciBvZiB0aGUgYXBwIGNhbGwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo1MwogICAgLy8gYW1vdW50ID0gdHhuRGVwb3NpdC5hbW91bnQKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQW1vdW50CiAgICBmcmFtZV9idXJ5IDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo1NAogICAgLy8gZGVwb3NpdElzVmFsaWQgPSB0cnVlCiAgICBpbnRjXzAgLy8gMQogICAgZnJhbWVfYnVyeSA1CgpjcmVhdGVfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjU2CiAgICAvLyBpZiAodHhuRGVwb3NpdC50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuQXNzZXRUcmFuc2ZlcikgewogICAgZnJhbWVfZGlnIDcKICAgIGludGNfMiAvLyA0CiAgICA9PQogICAgYnogY3JlYXRlX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjU3CiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5hc3NldFJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywgJ1JlY2VpdmVyIG11c3QgYmUgdGhlIGVzY3JvdyBhcHAnKQogICAgZnJhbWVfZGlnIC0zCiAgICBndHhucyBBc3NldFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBSZWNlaXZlciBtdXN0IGJlIHRoZSBlc2Nyb3cgYXBwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NTgKICAgIC8vIGFtb3VudCA9IHR4bkRlcG9zaXQuYXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgQXNzZXRBbW91bnQKICAgIGZyYW1lX2J1cnkgNAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjU5CiAgICAvLyB0b2tlbklkID0gdHhuRGVwb3NpdC54ZmVyQXNzZXQuaWQKICAgIGZyYW1lX2RpZyAtMwogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBmcmFtZV9idXJ5IDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2MAogICAgLy8gZGVwb3NpdElzVmFsaWQgPSB0cnVlCiAgICBpbnRjXzAgLy8gMQogICAgZnJhbWVfYnVyeSA1CgpjcmVhdGVfYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjYyCiAgICAvLyBhc3NlcnQoYW1vdW50ID4gMCwgJ0RlcG9zaXQgc2hvdWxkIGJlIHBvc2l0aXZlIG51bWJlcicpCiAgICBmcmFtZV9kaWcgNAogICAgYXNzZXJ0IC8vIERlcG9zaXQgc2hvdWxkIGJlIHBvc2l0aXZlIG51bWJlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjYzCiAgICAvLyBhc3NlcnQoZGVwb3NpdElzVmFsaWQsICdEZXBvc2l0IG11c3QgYmUgYXNzZXQgdHJhbnNmZXIgb3IgcGF5bWVudCcpCiAgICBmcmFtZV9kaWcgNQogICAgYXNzZXJ0IC8vIERlcG9zaXQgbXVzdCBiZSBhc3NldCB0cmFuc2ZlciBvciBwYXltZW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NjUKICAgIC8vIGNvbnN0IHRva2VuSWROID0gbmV3IFVpbnRONjQodG9rZW5JZCkKICAgIGZyYW1lX2RpZyAzCiAgICBpdG9iCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjY2CiAgICAvLyBsZXQgcHJldkRlcG9zaXRzOiB1aW50NjQgPSAwCiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjY3CiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkTikuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGNyZWF0ZV9hZnRlcl9pZl9lbHNlQDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2OAogICAgLy8gcHJldkRlcG9zaXRzID0gdGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkTikudmFsdWUubmF0aXZlCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGJ0b2kKICAgIGZyYW1lX2J1cnkgMgoKY3JlYXRlX2FmdGVyX2lmX2Vsc2VANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo3MAogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkTikudmFsdWUgPSBuZXcgVWludE42NChwcmV2RGVwb3NpdHMgKyBhbW91bnQpCiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfZGlnIDQKICAgIGR1cAogICAgY292ZXIgMgogICAgKwogICAgaXRvYgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo3MwogICAgLy8gYWNjb3VudDogbmV3IEFkZHJlc3MoVHhuLnNlbmRlciksCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIGNyZWF0ZWRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo3NQogICAgLy8gcmVzY3VlVGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCArIHJlc2N1ZURlbGF5KSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGZyYW1lX2RpZyAtMgogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjc4CiAgICAvLyBhbW91bnQ6IG5ldyBVaW50TjY0KGFtb3VudCksCiAgICB1bmNvdmVyIDMKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo3Mi03OQogICAgLy8gY29uc3QgZXNjcm93ID0gbmV3IEVzY3Jvd0luc3RhbmNlKHsKICAgIC8vICAgYWNjb3VudDogbmV3IEFkZHJlc3MoVHhuLnNlbmRlciksCiAgICAvLyAgIGNyZWF0ZWRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgcmVzY3VlVGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCArIHJlc2N1ZURlbGF5KSwKICAgIC8vICAgdG9rZW5JZDogbmV3IFVpbnRONjQodG9rZW5JZCksCiAgICAvLyAgIHNlY3JldEhhc2g6IHNlY3JldEhhc2gsCiAgICAvLyAgIGFtb3VudDogbmV3IFVpbnRONjQoYW1vdW50KSwKICAgIC8vIH0pCiAgICBjb3ZlciAyCiAgICBjb25jYXQKICAgIGZyYW1lX2RpZyAxCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjgxCiAgICAvLyB0aGlzLmVzY3Jvd3Moc2VjcmV0SGFzaCkudmFsdWUgPSBlc2Nyb3cuY29weSgpCiAgICBmcmFtZV9kaWcgNgogICAgc3dhcAogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cubWFrZUhhc2goc2VjcmV0OiBieXRlcykgLT4gYnl0ZXM6Cm1ha2VIYXNoOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjg5LTkwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIG1ha2VIYXNoKHNlY3JldDogYXJjNC5EeW5hbWljQnl0ZXMpOiBieXRlcyB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo5MQogICAgLy8gcmV0dXJuIG9wLmtlY2NhazI1NihzZWNyZXQuYnl0ZXMpCiAgICBmcmFtZV9kaWcgLTEKICAgIGtlY2NhazI1NgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cuZ2V0RXNjcm93KHNlY3JldEhhc2g6IGJ5dGVzKSAtPiBieXRlczoKZ2V0RXNjcm93OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwMC0xMDEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgZ2V0RXNjcm93KHNlY3JldEhhc2g6IGFyYzQuU3RhdGljQnl0ZXM8MzI+KTogRXNjcm93SW5zdGFuY2UgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzEKICAgIC8vIHB1YmxpYyBlc2Nyb3dzID0gQm94TWFwPGFyYzQuU3RhdGljQnl0ZXM8MzI+LCBFc2Nyb3dJbnN0YW5jZT4oeyBrZXlQcmVmaXg6ICdlJyB9KQogICAgYnl0ZWNfMiAvLyAiZSIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTAyCiAgICAvLyByZXR1cm4gdGhpcy5lc2Nyb3dzKHNlY3JldEhhc2gpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cubGF0ZXN0VGltZXN0YW1wKCkgLT4gdWludDY0OgpsYXRlc3RUaW1lc3RhbXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTEyCiAgICAvLyByZXR1cm4gR2xvYmFsLmxhdGVzdFRpbWVzdGFtcAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cud2l0aGRyYXcoc2VjcmV0SGFzaDogYnl0ZXMsIHNlY3JldDogYnl0ZXMpIC0+IHZvaWQ6CndpdGhkcmF3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEyMS0xMjIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgd2l0aGRyYXcoc2VjcmV0SGFzaDogYXJjNC5TdGF0aWNCeXRlczwzMj4sIHNlY3JldDogYXJjNC5EeW5hbWljQnl0ZXMpIHsKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMxCiAgICAvLyBwdWJsaWMgZXNjcm93cyA9IEJveE1hcDxhcmM0LlN0YXRpY0J5dGVzPDMyPiwgRXNjcm93SW5zdGFuY2U+KHsga2V5UHJlZml4OiAnZScgfSkKICAgIGJ5dGVjXzIgLy8gImUiCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEyMwogICAgLy8gYXNzZXJ0KHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS5leGlzdHMsICdUaGUgZXNjcm93IGRvZXMgbm90IGV4aXN0cycpCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIFRoZSBlc2Nyb3cgZG9lcyBub3QgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTI0CiAgICAvLyBhc3NlcnQob3Aua2VjY2FrMjU2KHNlY3JldC5ieXRlcykgPT09IHNlY3JldEhhc2guYnl0ZXMsICdUaGUgcGFzc3dvcmQgaXMgbm90IGNvcnJlY3QnKQogICAgZnJhbWVfZGlnIC0xCiAgICBrZWNjYWsyNTYKICAgIGZyYW1lX2RpZyAtMgogICAgPT0KICAgIGFzc2VydCAvLyBUaGUgcGFzc3dvcmQgaXMgbm90IGNvcnJlY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMjYKICAgIC8vIGNvbnN0IGVzY3JvdyA9IHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS52YWx1ZS5jb3B5KCkKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMjgKICAgIC8vIEdsb2JhbC5sYXRlc3RUaW1lc3RhbXAgPCBlc2Nyb3cucmVzY3VlVGltZS5uYXRpdmUsCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBkaWcgMQogICAgaW50Y18zIC8vIDgKICAgIGV4dHJhY3RfdWludDY0CiAgICA8CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTI3LTEzMAogICAgLy8gYXNzZXJ0KAogICAgLy8gICBHbG9iYWwubGF0ZXN0VGltZXN0YW1wIDwgZXNjcm93LnJlc2N1ZVRpbWUubmF0aXZlLAogICAgLy8gICAnRXNjcm93IGNhbiBiZSByZWRlZW1lZCB3aXRoIHBhc3N3b3JkIHVwIHRvIHRoZSByZXNjdWUgdGltZScsCiAgICAvLyApCiAgICBhc3NlcnQgLy8gRXNjcm93IGNhbiBiZSByZWRlZW1lZCB3aXRoIHBhc3N3b3JkIHVwIHRvIHRoZSByZXNjdWUgdGltZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEzMgogICAgLy8gdGhpcy5fc2VuZChuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKSwgZXNjcm93LnRva2VuSWQubmF0aXZlLCBlc2Nyb3cuYW1vdW50Lm5hdGl2ZSkKICAgIHR4biBTZW5kZXIKICAgIGRpZyAxCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgdW5jb3ZlciAyCiAgICBwdXNoaW50IDI0IC8vIDI0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgY2FsbHN1YiBfc2VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEzNQogICAgLy8gdGhpcy5lc2Nyb3dzKHNlY3JldEhhc2gpLmRlbGV0ZSgpCiAgICBib3hfZGVsCiAgICBwb3AKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93LmNhbmNlbChzZWNyZXRIYXNoOiBieXRlcykgLT4gdm9pZDoKY2FuY2VsOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE0Mi0xNDMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgY2FuY2VsKHNlY3JldEhhc2g6IGFyYzQuU3RhdGljQnl0ZXM8MzI+KSB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMQogICAgLy8gcHVibGljIGVzY3Jvd3MgPSBCb3hNYXA8YXJjNC5TdGF0aWNCeXRlczwzMj4sIEVzY3Jvd0luc3RhbmNlPih7IGtleVByZWZpeDogJ2UnIH0pCiAgICBieXRlY18yIC8vICJlIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNDQKICAgIC8vIGFzc2VydCh0aGlzLmVzY3Jvd3Moc2VjcmV0SGFzaCkuZXhpc3RzLCAnVGhlIGVzY3JvdyBkb2VzIG5vdCBleGlzdHMnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGFzc2VydCAvLyBUaGUgZXNjcm93IGRvZXMgbm90IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE0NQogICAgLy8gY29uc3QgZXNjcm93ID0gdGhpcy5lc2Nyb3dzKHNlY3JldEhhc2gpLnZhbHVlLmNvcHkoKQogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE0NgogICAgLy8gYXNzZXJ0KGVzY3Jvdy5yZXNjdWVUaW1lLm5hdGl2ZSA8IEdsb2JhbC5sYXRlc3RUaW1lc3RhbXAsICdUaGUgZXNjcm93IGNhbm5vdCBiZSBjYW5jZWxlZCB5ZXQnKQogICAgZHVwCiAgICBpbnRjXzMgLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIDwKICAgIGFzc2VydCAvLyBUaGUgZXNjcm93IGNhbm5vdCBiZSBjYW5jZWxlZCB5ZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNDgKICAgIC8vIHRoaXMuX3NlbmQoZXNjcm93LmFjY291bnQsIGVzY3Jvdy50b2tlbklkLm5hdGl2ZSwgZXNjcm93LmFtb3VudC5uYXRpdmUpCiAgICBkdXAKICAgIGV4dHJhY3QgMzIgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkaWcgMQogICAgcHVzaGludCAxNiAvLyAxNgogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgMgogICAgcHVzaGludCAyNCAvLyAyNAogICAgZXh0cmFjdF91aW50NjQKICAgIGNhbGxzdWIgX3NlbmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNTEKICAgIC8vIHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS5kZWxldGUoKQogICAgYm94X2RlbAogICAgcG9wCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy5vcHRJblRvQVNBKHR4bkRlcG9zaXQ6IHVpbnQ2NCwgYXNzZXRJZDogYnl0ZXMpIC0+IHZvaWQ6Cm9wdEluVG9BU0E6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTYwLTE2MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBvcHRJblRvQVNBKHR4bkRlcG9zaXQ6IGd0eG4uUGF5bWVudFR4biwgYXNzZXRJZDogVWludE42NCkgewogICAgcHJvdG8gMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTYzCiAgICAvLyB0eG5EZXBvc2l0LnJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE2Mi0xNjUKICAgIC8vIGFzc2VydCgKICAgIC8vICAgdHhuRGVwb3NpdC5yZWNlaXZlciA9PT0gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICdSZWNlaXZlciBvZiB0aGUgb3B0aW4gZmVlIG11c3QgYmUgdGhlIGN1cnJlbnQgc21hcnQgY29udHJhY3QnLAogICAgLy8gKQogICAgYXNzZXJ0IC8vIFJlY2VpdmVyIG9mIHRoZSBvcHRpbiBmZWUgbXVzdCBiZSB0aGUgY3VycmVudCBzbWFydCBjb250cmFjdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE2NgogICAgLy8gYXNzZXJ0KHR4bkRlcG9zaXQuYW1vdW50ID09PSAxMDBfMDAwLCAnT3B0IGluIGZlZSB0byBjb3ZlciBNQlInKQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgIHB1c2hpbnQgMTAwMDAwIC8vIDEwMDAwMAogICAgPT0KICAgIGFzc2VydCAvLyBPcHQgaW4gZmVlIHRvIGNvdmVyIE1CUgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE2NwogICAgLy8gYXNzZXJ0KEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmlzT3B0ZWRJbihBc3NldChhc3NldElkLm5hdGl2ZSkpID09PSBmYWxzZSwgJ0Fzc2V0IGlzIGFscmVhZHkgb3B0ZWQgaW4nKQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgc3dhcAogICAgZGlnIDEKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gQXNzZXQgaXMgYWxyZWFkeSBvcHRlZCBpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE2OC0xNzUKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXRJZC5uYXRpdmUsCiAgICAvLyAgICAgYXNzZXRBbW91bnQ6IDAsCiAgICAvLyAgICAgYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNzIKICAgIC8vIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE3MQogICAgLy8gYXNzZXRBbW91bnQ6IDAsCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNjgtMTc0CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIGludGNfMiAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTczCiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNjgtMTc1CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cuYWRtaW5XaXRoZHJhd2FibGUoYXNzZXRJZDogdWludDY0KSAtPiB1aW50NjQ6CmFkbWluV2l0aGRyYXdhYmxlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE4NC0xODUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYWRtaW5XaXRoZHJhd2FibGUoYXNzZXRJZDogdWludDY0KTogdWludDY0IHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE4NgogICAgLy8gY29uc3QgYXNzZXRJZE4gPSBuZXcgVWludE42NChhc3NldElkKQogICAgZnJhbWVfZGlnIC0xCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTg3CiAgICAvLyBpZiAoYXNzZXRJZCA9PT0gMCkgewogICAgZnJhbWVfZGlnIC0xCiAgICBibnogYWRtaW5XaXRoZHJhd2FibGVfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxODkKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTkwCiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlIC0KICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE4OS0xOTAKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZSAtCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxOTEKICAgIC8vIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxODktMTkxCiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5iYWxhbmNlIC0KICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkTikudmFsdWUubmF0aXZlCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTg4LTE5MgogICAgLy8gcmV0dXJuICgKICAgIC8vICAgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyAgIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgLy8gICB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIC8vICkKICAgIHJldHN1YgoKYWRtaW5XaXRoZHJhd2FibGVfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTk0CiAgICAvLyByZXR1cm4gQXNzZXQoYXNzZXRJZCkuYmFsYW5jZShHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcykgLSB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgb3B0ZWQgaW50byBhc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE42ND4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWNfMCAvLyAiZCIKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTk0CiAgICAvLyByZXR1cm4gQXNzZXQoYXNzZXRJZCkuYmFsYW5jZShHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcykgLSB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBidG9pCiAgICAtCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy5hZG1pbldpdGhkcmF3KGFzc2V0SWQ6IHVpbnQ2NCkgLT4gdWludDY0OgphZG1pbldpdGhkcmF3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIwNC0yMDUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCh7IHJlYWRvbmx5OiB0cnVlIH0pCiAgICAvLyBwdWJsaWMgYWRtaW5XaXRoZHJhdyhhc3NldElkOiB1aW50NjQpOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjA2CiAgICAvLyBjb25zdCBhc3NldElkTiA9IG5ldyBVaW50TjY0KGFzc2V0SWQpCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMDcKICAgIC8vIGlmIChhc3NldElkID09PSAwKSB7CiAgICBmcmFtZV9kaWcgLTEKICAgIGJueiBhZG1pbldpdGhkcmF3X2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjA5CiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5iYWxhbmNlIC0KICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIxMAogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZSAtCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RNaW5CYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMDktMjEwCiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5iYWxhbmNlIC0KICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE42ND4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWNfMCAvLyAiZCIKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjExCiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjA5LTIxMQogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlIC0KICAgIC8vIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIwOC0yMTIKICAgIC8vIHJldHVybiAoCiAgICAvLyAgIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgLy8gICBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlIC0KICAgIC8vICAgdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkTikudmFsdWUubmF0aXZlCiAgICAvLyApCiAgICByZXRzdWIKCmFkbWluV2l0aGRyYXdfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjE0CiAgICAvLyByZXR1cm4gQXNzZXQoYXNzZXRJZCkuYmFsYW5jZShHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcykgLSB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgb3B0ZWQgaW50byBhc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM1CiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE42ND4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWNfMCAvLyAiZCIKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjE0CiAgICAvLyByZXR1cm4gQXNzZXQoYXNzZXRJZCkuYmFsYW5jZShHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcykgLSB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBidG9pCiAgICAtCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy5fc2VuZChyZWNlaXZlcjogYnl0ZXMsIGFzc2V0SWQ6IHVpbnQ2NCwgYW1vdW50OiB1aW50NjQpIC0+IHZvaWQ6Cl9zZW5kOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIyMQogICAgLy8gcHJpdmF0ZSBfc2VuZChyZWNlaXZlcjogQWRkcmVzcywgYXNzZXRJZDogdWludDY0LCBhbW91bnQ6IHVpbnQ2NCk6IHZvaWQgewogICAgcHJvdG8gMyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjIyCiAgICAvLyBsZXQgcHJldkRlcG9zaXRzOiB1aW50NjQgPSAwCiAgICBpbnRjXzEgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIyMwogICAgLy8gY29uc3QgdG9rZW5JZE4gPSBuZXcgVWludE42NChhc3NldElkKQogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMjUKICAgIC8vIGlmICh0aGlzLmFsbERlcG9zaXRzKHRva2VuSWROKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogX3NlbmRfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjI2CiAgICAvLyBwcmV2RGVwb3NpdHMgPSB0aGlzLmFsbERlcG9zaXRzKHRva2VuSWROKS52YWx1ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgYnRvaQogICAgZnJhbWVfYnVyeSAwCgpfc2VuZF9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjI4CiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKHRva2VuSWROKS52YWx1ZSA9IG5ldyBVaW50TjY0KHByZXZEZXBvc2l0cyAtIGFtb3VudCkKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGl0b2IKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjMwCiAgICAvLyBpZiAoYXNzZXRJZCA9PT0gMCkgewogICAgZnJhbWVfZGlnIC0yCiAgICBibnogX3NlbmRfZWxzZV9ib2R5QDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMzEtMjM3CiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IGFtb3VudCwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyLmJ5dGVzLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIGZyYW1lX2RpZyAtMwogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIzMS0yMzYKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgICByZWNlaXZlcjogcmVjZWl2ZXIuYnl0ZXMsCiAgICAvLyAgIH0pCiAgICBpbnRjXzAgLy8gMQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIzNAogICAgLy8gZmVlOiAwLAogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjMxLTIzNwogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBhbW91bnQsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICAgIHJlY2VpdmVyOiByZWNlaXZlci5ieXRlcywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgpfc2VuZF9lbHNlX2JvZHlANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMzktMjQ2CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICBhc3NldEFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlci5ieXRlcywKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgZnJhbWVfZGlnIC0zCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIzOS0yNDUKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLmJ5dGVzLAogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXRJZCwKICAgIC8vICAgfSkKICAgIGludGNfMiAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjQyCiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMzktMjQ2CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICBhc3NldEFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlci5ieXRlcywKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAQAECCYDAWQEFR98dQFlMRtBAQKCCQQmvxNwBDYtR9cE2bZj8wRkzNkwBBH5J9AEqMf7IASKscFgBGTS14IEyB4ijTYaAI4JAKUAigB3AGYAVABFACwAFwACI0MxGRREMRhENhoBF4gCLRYpTFCwIkMxGRREMRhENhoBF4gB6RYpTFCwIkMxGRREMRhEMRYiCUk4ECISRDYaAYgBliJDMRkURDEYRDYaAYgBXSJDMRkURDEYRDYaATYaAogBGyJDMRkURDEYRIgBDBYpTFCwIkMxGRREMRhENhoBiADuKUxQsCJDMRkURDEYRDYaAYgA1EkVFlcGAkxQKUxQsCJDMRkURDEYRDEWIgk2GgEXNhoCiAANIkMxGUD/PzEYFEQiQ4oDACNJgAAjRwIqi/9QSb1FARREi/04EEkiEkEAGYv9OAcyChJEi/04ADEAEkSL/TgIjAQijAWLByQSQQAXi/04FDIKEkSL/TgSjASL/TgRjAMijAWLBESLBUSLAxZJjAEjjAIoTFBJjAC9RQFBAAeLAL5EF4wCiwKLBElOAggWiwBMvzEAMgcWMgeL/ggWTwMWTgJQiwFQTFBMUIv/UIsGTL+JigEBi/8CiYoBASqL/1C+RIkyB4mKAgAqi/5QSb1FAUSL/wKL/hJESb5EMgdLASVbDEQxAEsBgRBbTwKBGFuIAMC8SImKAQAqi/9QSb1FAURJvkRJJVsyBwxESVcgIEsBgRBbTwKBGFuIAJa8SImKAgCL/jgHMgoSRIv+OAiBoI0GEkQyCov/F0xLAXAARQEURLEyCrIUI7ISshEkshAjsgGziYoBAYv/Fov/QAAUMgpzAEQyCnMBRAkoTwJQvkQXCYkyCov/cABEKE8CUL5EFwmJigEBi/8Wi/9AABQyCnMARDIKcwFECShPAlC+RBcJiTIKi/9wAEQoTwJQvkQXCYmKAwAji/4WKExQSb1FAUEAB4sBvkQXjACLAIv/CRaLAUy/i/5AABGxi/2yB4v/sggishAjsgGzibGL/rIRi/2yFIv/shIkshAjsgGziQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}