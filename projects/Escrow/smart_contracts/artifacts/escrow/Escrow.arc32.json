{
    "hints": {
        "create(txn,pay,uint64,byte[32],address,address,byte[256])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "makeHash(byte[])byte[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,address,byte[256],byte[32])": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "EscrowInstance",
                    "elements": [
                        [
                            "createdTime",
                            "uint64"
                        ],
                        [
                            "rescueTime",
                            "uint64"
                        ],
                        [
                            "tokenId",
                            "uint64"
                        ],
                        [
                            "amount",
                            "uint64"
                        ],
                        [
                            "mbrAmount",
                            "uint64"
                        ],
                        [
                            "creator",
                            "address"
                        ],
                        [
                            "destinationSetter",
                            "address"
                        ],
                        [
                            "taker",
                            "address"
                        ],
                        [
                            "memo",
                            "byte[256]"
                        ],
                        [
                            "secretHash",
                            "byte[32]"
                        ]
                    ]
                }
            }
        },
        "getMBRDepositAmount()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "latestTimestamp()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(byte[32],byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "cancel(byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setTaker(byte[32],address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optInToToken(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "adminWithdrawable(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "adminWithdraw(uint64)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Escrow",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "txn",
                        "name": "txnDeposit",
                        "desc": "The deposit of the asset"
                    },
                    {
                        "type": "pay",
                        "name": "txnMBRDeposit",
                        "desc": "The deposit of native token to cover MBR. This deposit is returned to creator on withdrawal or rescue operation"
                    },
                    {
                        "type": "uint64",
                        "name": "rescueDelay",
                        "desc": "The number seconds from the current time after the tx can be canceled"
                    },
                    {
                        "type": "byte[32]",
                        "name": "secretHash",
                        "desc": "Hash of the secret in keccak256"
                    },
                    {
                        "type": "address",
                        "name": "taker",
                        "desc": "Creator of the escrow can set taker address. If taker address is set, with secret the funds can be routed only to this address. If the taker is zero address, anyone who claims with correct password, will receive the assets"
                    },
                    {
                        "type": "address",
                        "name": "destinationSetter"
                    },
                    {
                        "type": "byte[256]",
                        "name": "memo"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method."
            },
            {
                "name": "makeHash",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "secret",
                        "desc": "The secret"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[]",
                    "desc": "Hash of the secret"
                },
                "desc": "Return hash of the secret. Readonly method using the simulate method is for free."
            },
            {
                "name": "getEscrow",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secretHash",
                        "desc": ""
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64,address,address,address,byte[256],byte[32])"
                },
                "desc": "EscrowInstance by secret"
            },
            {
                "name": "getMBRDepositAmount",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Returns the amount to be deposited"
            },
            {
                "name": "latestTimestamp",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "Time as blockchain sees it"
                },
                "desc": "Get current time"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secretHash",
                        "desc": "Hash of the secret in keccak256"
                    },
                    {
                        "type": "byte[]",
                        "name": "secret",
                        "desc": "Secret"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw from escrow with known password"
            },
            {
                "name": "cancel",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secretHash",
                        "desc": "Hash of the secret in keccak256"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "After the time has passed, anyone can call this method to return funds to the original sender of the escrow account"
            },
            {
                "name": "setTaker",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "secretHash",
                        "desc": "Hash of the secret in keccak256"
                    },
                    {
                        "type": "address",
                        "name": "taker"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "When destination setter is set, the destination setter can set the address of end user who receive the funds"
            },
            {
                "name": "optInToToken",
                "args": [
                    {
                        "type": "pay",
                        "name": "txnDeposit",
                        "desc": "Deposit tx"
                    },
                    {
                        "type": "uint64",
                        "name": "tokenId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Anyone can optin this contract to his ASA if he deposits MBR"
            },
            {
                "name": "adminWithdrawable",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId",
                        "desc": "Asset"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "Withdrawable amount"
                },
                "desc": "Shows the current withdrawable amount for the admin"
            },
            {
                "name": "adminWithdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId",
                        "desc": "Asset"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Method to exctract excess assets from smart contract address by the admin"
            },
            {
                "name": "sendOnlineKeyRegistration",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "voteKey"
                    },
                    {
                        "type": "byte[]",
                        "name": "selectionKey"
                    },
                    {
                        "type": "byte[]",
                        "name": "stateProofKey"
                    },
                    {
                        "type": "uint64",
                        "name": "voteFirst"
                    },
                    {
                        "type": "uint64",
                        "name": "voteLast"
                    },
                    {
                        "type": "uint64",
                        "name": "voteKeyDilution"
                    },
                    {
                        "type": "uint64",
                        "name": "fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[]"
                },
                "desc": "Creator can perfom key registration for this escrow contract, so that he can receive staking rewards"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}