/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Escrow","structs":{"EscrowInstance":[{"name":"createdTime","type":"uint64"},{"name":"rescueTime","type":"uint64"},{"name":"tokenId","type":"uint64"},{"name":"amount","type":"uint64"},{"name":"mbrAmount","type":"uint64"},{"name":"creator","type":"address"},{"name":"taker","type":"address"},{"name":"secretHash","type":"byte[32]"}]},"methods":[{"name":"create","args":[{"type":"txn","name":"txnDeposit","desc":"The deposit of the asset"},{"type":"pay","name":"txnMBRDeposit","desc":"The deposit of native token to cover MBR. This deposit is returned to creator on withdrawal or rescue operation"},{"type":"uint64","name":"rescueDelay","desc":"The number seconds from the current time after the tx can be canceled"},{"type":"byte[32]","name":"secretHash","desc":"Hash of the secret in keccak256"},{"type":"address","name":"taker","desc":"Creator of the escrow can set taker address. If taker address is set, with secret the funds can be routed only to this address. If the taker is zero address, anyone who claims with correct password, will receive the assets"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method.","events":[],"recommendations":{}},{"name":"makeHash","args":[{"type":"byte[]","name":"secret","desc":"The secret"}],"returns":{"type":"byte[]","desc":"Hash of the secret"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Return hash of the secret. Readonly method using the simulate method is for free.","events":[],"recommendations":{}},{"name":"getEscrow","args":[{"type":"byte[32]","name":"secretHash","desc":""}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])","struct":"EscrowInstance"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"EscrowInstance by secret","events":[],"recommendations":{}},{"name":"getMBRDepositAmount","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Returns the amount to be deposited","events":[],"recommendations":{}},{"name":"latestTimestamp","args":[],"returns":{"type":"uint64","desc":"Time as blockchain sees it"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current time","events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"byte[32]","name":"secretHash","desc":"Hash of the secret in keccak256"},{"type":"byte[]","name":"secret","desc":"Secret"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw from escrow with known password","events":[],"recommendations":{}},{"name":"cancel","args":[{"type":"byte[32]","name":"secretHash","desc":"Hash of the secret in keccak256"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"After the time has passed, anyone can call this method to return funds to the original sender of the escrow account","events":[],"recommendations":{}},{"name":"optInToToken","args":[{"type":"pay","name":"txnDeposit","desc":"Deposit tx"},{"type":"uint64","name":"tokenId"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Anyone can optin this contract to his ASA if he deposits MBR","events":[],"recommendations":{}},{"name":"adminWithdrawable","args":[{"type":"uint64","name":"assetId","desc":"Asset"}],"returns":{"type":"uint64","desc":"Withdrawable amount"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Shows the current withdrawable amount for the admin","events":[],"recommendations":{}},{"name":"adminWithdraw","args":[{"type":"uint64","name":"assetId","desc":"Asset"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Method to exctract excess assets from smart contract address by the admin","events":[],"recommendations":{}},{"name":"sendOnlineKeyRegistration","args":[{"type":"byte[]","name":"voteKey"},{"type":"byte[]","name":"selectionKey"},{"type":"byte[]","name":"stateProofKey"},{"type":"uint64","name":"voteFirst"},{"type":"uint64","name":"voteLast"},{"type":"uint64","name":"voteKeyDilution"},{"type":"uint64","name":"fee"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Creator can perfom key registration for this escrow contract, so that he can receive staking rewards","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"escrows":{"keyType":"byte[32]","valueType":"EscrowInstance","desc":"List of all escrows","prefix":"ZQ=="},"allDeposits":{"keyType":"uint64","valueType":"uint64","desc":"All deposits of all escrows. Deployer of the contract can request any staking rewards accured to any of the assets excess of the all deposits","prefix":"ZA=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1099],"errorMessage":"Asset is already opted in"},{"pc":[610,710,737,765,848,990,1167,1183,1220,1236,1306],"errorMessage":"Box must have value"},{"pc":[1127],"errorMessage":"Box with all deposits must not exists when opting in"},{"pc":[583],"errorMessage":"Deposit must be asset transfer or payment"},{"pc":[580],"errorMessage":"Deposit should be positive number"},{"pc":[857],"errorMessage":"Escrow can be redeemed with password up to the rescue time"},{"pc":[511],"errorMessage":"Escrow with the same id already exists"},{"pc":[861,887,958,1012,1034],"errorMessage":"Index access is out of bounds"},{"pc":[501],"errorMessage":"MBR deposit must be send to the escrow app"},{"pc":[687],"errorMessage":"MBR increment must equal mbr deposit tx amount"},{"pc":[189,247,268,289,314,329,347,364,381,400,427],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1248],"errorMessage":"Only creator can use this method"},{"pc":[1195],"errorMessage":"Only deployer of this app can withdraw"},{"pc":[1086],"errorMessage":"Opt in fee to cover MBR for asset and box to track all deposits"},{"pc":[529,562],"errorMessage":"Receiver must be the escrow app"},{"pc":[1069],"errorMessage":"Receiver of the optin fee must be the current smart contract"},{"pc":[488],"errorMessage":"Secret hash cannot be empty"},{"pc":[537],"errorMessage":"Sender of deposit must be the same as the sender of the app call"},{"pc":[998],"errorMessage":"The escrow cannot be canceled yet"},{"pc":[832,981],"errorMessage":"The escrow does not exists"},{"pc":[839],"errorMessage":"The password is not correct"},{"pc":[493,682,776,807,1155,1160,1208,1213],"errorMessage":"account funded"},{"pc":[1177,1230],"errorMessage":"account opted into asset"},{"pc":[469],"errorMessage":"can only call when creating"},{"pc":[192,250,271,292,317,332,350,367,384,403,430],"errorMessage":"can only call when not creating"},{"pc":[302,445],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDI0IDMyCiAgICBieXRlY2Jsb2NrICJkIiAweDE1MWY3Yzc1ICJlIiAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAgMHg2NDAwMDAwMDAwMDAwMDAwMDAgMHg2NTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxNgogICAgcHVzaGJ5dGVzcyAweDU2YTA2OGJkIDB4MzYyZDQ3ZDcgMHhiZjhiM2I3MCAweGFkYTFiM2Q3IDB4NjRjY2Q5MzAgMHgxMWY5MjdkMCAweGE4YzdmYjIwIDB4ZTM5NDY5NWQgMHg2NGQyZDc4MiAweGM4MWUyMjhkIDB4YzYxZDU2ZjUgLy8gbWV0aG9kICJjcmVhdGUodHhuLHBheSx1aW50NjQsYnl0ZVszMl0sYWRkcmVzcyl2b2lkIiwgbWV0aG9kICJtYWtlSGFzaChieXRlW10pYnl0ZVtdIiwgbWV0aG9kICJnZXRFc2Nyb3coYnl0ZVszMl0pKHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsYWRkcmVzcyxhZGRyZXNzLGJ5dGVbMzJdKSIsIG1ldGhvZCAiZ2V0TUJSRGVwb3NpdEFtb3VudCgpdWludDY0IiwgbWV0aG9kICJsYXRlc3RUaW1lc3RhbXAoKXVpbnQ2NCIsIG1ldGhvZCAid2l0aGRyYXcoYnl0ZVszMl0sYnl0ZVtdKXZvaWQiLCBtZXRob2QgImNhbmNlbChieXRlWzMyXSl2b2lkIiwgbWV0aG9kICJvcHRJblRvVG9rZW4ocGF5LHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJhZG1pbldpdGhkcmF3YWJsZSh1aW50NjQpdWludDY0IiwgbWV0aG9kICJhZG1pbldpdGhkcmF3KHVpbnQ2NCl1aW50NjQiLCBtZXRob2QgInNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24oYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KWJ5dGVbXSIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlX3JvdXRlQDMgbWFpbl9tYWtlSGFzaF9yb3V0ZUA0IG1haW5fZ2V0RXNjcm93X3JvdXRlQDUgbWFpbl9nZXRNQlJEZXBvc2l0QW1vdW50X3JvdXRlQDYgbWFpbl9sYXRlc3RUaW1lc3RhbXBfcm91dGVANyBtYWluX3dpdGhkcmF3X3JvdXRlQDggbWFpbl9jYW5jZWxfcm91dGVAOSBtYWluX29wdEluVG9Ub2tlbl9yb3V0ZUAxMCBtYWluX2FkbWluV2l0aGRyYXdhYmxlX3JvdXRlQDExIG1haW5fYWRtaW5XaXRoZHJhd19yb3V0ZUAxMiBtYWluX3NlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb25fcm91dGVAMTMKCm1haW5fYWZ0ZXJfaWZfZWxzZUAyMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIGludGNfMSAvLyAwCiAgICByZXR1cm4KCm1haW5fc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbl9yb3V0ZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDUKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDYKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDcKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMTkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24KICAgIGR1cAogICAgbGVuCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FkbWluV2l0aGRyYXdfcm91dGVAMTI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzAxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzAxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBhZG1pbldpdGhkcmF3CiAgICBpdG9iCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2FkbWluV2l0aGRyYXdhYmxlX3JvdXRlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI4MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI4MAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgYWRtaW5XaXRoZHJhd2FibGUKICAgIGl0b2IKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fb3B0SW5Ub1Rva2VuX3JvdXRlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI0NQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjQ1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBvcHRJblRvVG9rZW4KICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY2FuY2VsX3JvdXRlQDk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjIwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjIwCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgY2FsbHN1YiBjYW5jZWwKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fd2l0aGRyYXdfcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxODMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxODMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIHdpdGhkcmF3CiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2xhdGVzdFRpbWVzdGFtcF9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE3MgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBsYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0TUJSRGVwb3NpdEFtb3VudF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE0NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRNQlJEZXBvc2l0QW1vdW50CiAgICBpdG9iCiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldEVzY3Jvd19yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBleHBvcnQgY2xhc3MgRXNjcm93IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEzNQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIGNhbGxzdWIgZ2V0RXNjcm93CiAgICBieXRlY18xIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX21ha2VIYXNoX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTI0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTI0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgY2FsbHN1YiBtYWtlSGFzaAogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzEgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlX3JvdXRlQDM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gZXhwb3J0IGNsYXNzIEVzY3JvdyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBHcm91cEluZGV4CiAgICBwdXNoaW50IDIgLy8gMgogICAgLQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGNyZWF0ZQogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIGV4cG9ydCBjbGFzcyBFc2Nyb3cgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIwCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93LmNyZWF0ZSh0eG5EZXBvc2l0OiB1aW50NjQsIHR4bk1CUkRlcG9zaXQ6IHVpbnQ2NCwgcmVzY3VlRGVsYXk6IHVpbnQ2NCwgc2VjcmV0SGFzaDogYnl0ZXMsIHRha2VyOiBieXRlcykgLT4gdm9pZDoKY3JlYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjQ4LTU1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGNyZWF0ZSgKICAgIC8vICAgdHhuRGVwb3NpdDogZ3R4bi5UcmFuc2FjdGlvbiwKICAgIC8vICAgdHhuTUJSRGVwb3NpdDogZ3R4bi5QYXltZW50VHhuLAogICAgLy8gICByZXNjdWVEZWxheTogdWludDY0LAogICAgLy8gICBzZWNyZXRIYXNoOiBhcmM0LlN0YXRpY0J5dGVzPDMyPiwKICAgIC8vICAgdGFrZXI6IEFkZHJlc3MsCiAgICAvLyApOiB2b2lkIHsKICAgIHByb3RvIDUgMAogICAgaW50Y18xIC8vIDAKICAgIGR1cAogICAgcHVzaGJ5dGVzICIiCiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo1NgogICAgLy8gbGV0IHRva2VuSWQ6IHVpbnQ2NCA9IDAKICAgIGludGNfMSAvLyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NTctNTgKICAgIC8vIGxldCBhbW91bnQ6IHVpbnQ2NCA9IDAKICAgIC8vIGxldCBkZXBvc2l0SXNWYWxpZDogYm9vbGVhbiA9IGZhbHNlCiAgICBkdXBuIDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2MAogICAgLy8gYXNzZXJ0KCFzZWNyZXRIYXNoLm5hdGl2ZS5lcXVhbHMoYnl0ZXMubmF0aXZlKSwgJ1NlY3JldCBoYXNoIGNhbm5vdCBiZSBlbXB0eScpCiAgICBmcmFtZV9kaWcgLTIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo1OQogICAgLy8gY29uc3QgYnl0ZXMgPSBuZXcgU3RhdGljQnl0ZXM8MzI+KCkKICAgIGJ5dGVjXzMgLy8gMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NjAKICAgIC8vIGFzc2VydCghc2VjcmV0SGFzaC5uYXRpdmUuZXF1YWxzKGJ5dGVzLm5hdGl2ZSksICdTZWNyZXQgaGFzaCBjYW5ub3QgYmUgZW1wdHknKQogICAgPT0KICAgICEKICAgIGFzc2VydCAvLyBTZWNyZXQgaGFzaCBjYW5ub3QgYmUgZW1wdHkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2MQogICAgLy8gY29uc3QgbWJyQXRTdGFydCA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjYyCiAgICAvLyBhc3NlcnQodHhuTUJSRGVwb3NpdC5yZWNlaXZlciA9PT0gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsICdNQlIgZGVwb3NpdCBtdXN0IGJlIHNlbmQgdG8gdGhlIGVzY3JvdyBhcHAnKQogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gTUJSIGRlcG9zaXQgbXVzdCBiZSBzZW5kIHRvIHRoZSBlc2Nyb3cgYXBwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIHB1YmxpYyBlc2Nyb3dzID0gQm94TWFwPGFyYzQuU3RhdGljQnl0ZXM8MzI+LCBFc2Nyb3dJbnN0YW5jZT4oeyBrZXlQcmVmaXg6ICdlJyB9KQogICAgYnl0ZWNfMiAvLyAiZSIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2MwogICAgLy8gYXNzZXJ0KHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS5leGlzdHMgPT09IGZhbHNlLCAnRXNjcm93IHdpdGggdGhlIHNhbWUgaWQgYWxyZWFkeSBleGlzdHMnKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gRXNjcm93IHdpdGggdGhlIHNhbWUgaWQgYWxyZWFkeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2NAogICAgLy8gaWYgKHR4bkRlcG9zaXQudHlwZSA9PT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQpIHsKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgVHlwZUVudW0KICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgID09CiAgICBieiBjcmVhdGVfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NjUKICAgIC8vIGFzc2VydCh0eG5EZXBvc2l0LnJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywgJ1JlY2VpdmVyIG11c3QgYmUgdGhlIGVzY3JvdyBhcHAnKQogICAgZnJhbWVfZGlnIC01CiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gUmVjZWl2ZXIgbXVzdCBiZSB0aGUgZXNjcm93IGFwcAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjY2CiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5zZW5kZXIgPT09IFR4bi5zZW5kZXIsICdTZW5kZXIgb2YgZGVwb3NpdCBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBzZW5kZXIgb2YgdGhlIGFwcCBjYWxsJykKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgU2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICA9PQogICAgYXNzZXJ0IC8vIFNlbmRlciBvZiBkZXBvc2l0IG11c3QgYmUgdGhlIHNhbWUgYXMgdGhlIHNlbmRlciBvZiB0aGUgYXBwIGNhbGwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2NwogICAgLy8gYW1vdW50ID0gdHhuRGVwb3NpdC5hbW91bnQKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgQW1vdW50CiAgICBmcmFtZV9idXJ5IDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo2OAogICAgLy8gZGVwb3NpdElzVmFsaWQgPSB0cnVlCiAgICBpbnRjXzAgLy8gMQogICAgZnJhbWVfYnVyeSA2CgpjcmVhdGVfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjcwCiAgICAvLyBpZiAodHhuRGVwb3NpdC50eXBlID09PSBUcmFuc2FjdGlvblR5cGUuQXNzZXRUcmFuc2ZlcikgewogICAgZnJhbWVfZGlnIDkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICA9PQogICAgYnogY3JlYXRlX2FmdGVyX2lmX2Vsc2VANAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjcxCiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5hc3NldFJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywgJ1JlY2VpdmVyIG11c3QgYmUgdGhlIGVzY3JvdyBhcHAnKQogICAgZnJhbWVfZGlnIC01CiAgICBndHhucyBBc3NldFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydCAvLyBSZWNlaXZlciBtdXN0IGJlIHRoZSBlc2Nyb3cgYXBwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NzIKICAgIC8vIGFtb3VudCA9IHR4bkRlcG9zaXQuYXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgQXNzZXRBbW91bnQKICAgIGZyYW1lX2J1cnkgNQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjczCiAgICAvLyB0b2tlbklkID0gdHhuRGVwb3NpdC54ZmVyQXNzZXQuaWQKICAgIGZyYW1lX2RpZyAtNQogICAgZ3R4bnMgWGZlckFzc2V0CiAgICBmcmFtZV9idXJ5IDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo3NAogICAgLy8gZGVwb3NpdElzVmFsaWQgPSB0cnVlCiAgICBpbnRjXzAgLy8gMQogICAgZnJhbWVfYnVyeSA2CgpjcmVhdGVfYWZ0ZXJfaWZfZWxzZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjc2CiAgICAvLyBhc3NlcnQoYW1vdW50ID4gMCwgJ0RlcG9zaXQgc2hvdWxkIGJlIHBvc2l0aXZlIG51bWJlcicpCiAgICBmcmFtZV9kaWcgNQogICAgYXNzZXJ0IC8vIERlcG9zaXQgc2hvdWxkIGJlIHBvc2l0aXZlIG51bWJlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyBhc3NlcnQoZGVwb3NpdElzVmFsaWQsICdEZXBvc2l0IG11c3QgYmUgYXNzZXQgdHJhbnNmZXIgb3IgcGF5bWVudCcpCiAgICBmcmFtZV9kaWcgNgogICAgYXNzZXJ0IC8vIERlcG9zaXQgbXVzdCBiZSBhc3NldCB0cmFuc2ZlciBvciBwYXltZW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6NzkKICAgIC8vIGlmICh0b2tlbklkID09PSAwKSB7CiAgICBmcmFtZV9kaWcgNAogICAgYm56IGNyZWF0ZV9lbHNlX2JvZHlAOAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjgwCiAgICAvLyBjb25zdCB0b2tlbklkTiA9IG5ldyBVaW50TjY0KHRva2VuSWQpCiAgICBmcmFtZV9kaWcgNAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjgxCiAgICAvLyBsZXQgcHJldkRlcG9zaXRzOiB1aW50NjQgPSAwCiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjgyCiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkTikuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGNyZWF0ZV9hZnRlcl9pZl9lbHNlQDcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo4MwogICAgLy8gcHJldkRlcG9zaXRzID0gdGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkTikudmFsdWUubmF0aXZlCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGJ0b2kKICAgIGZyYW1lX2J1cnkgMgoKY3JlYXRlX2FmdGVyX2lmX2Vsc2VANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo4NQogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkTikudmFsdWUgPSBuZXcgVWludE42NChwcmV2RGVwb3NpdHMgKyBhbW91bnQgKyB0eG5NQlJEZXBvc2l0LmFtb3VudCkKICAgIGZyYW1lX2RpZyAyCiAgICBmcmFtZV9kaWcgNQogICAgKwogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBBbW91bnQKICAgICsKICAgIGl0b2IKICAgIGZyYW1lX2RpZyAwCiAgICBzd2FwCiAgICBib3hfcHV0CgpjcmVhdGVfYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMDMKICAgIC8vIGNyZWF0b3I6IG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwNQogICAgLy8gY3JlYXRlZFRpbWU6IG5ldyBVaW50TjY0KEdsb2JhbC5sYXRlc3RUaW1lc3RhbXApLAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwNgogICAgLy8gcmVzY3VlVGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCArIHJlc2N1ZURlbGF5KSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGZyYW1lX2RpZyAtMwogICAgKwogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwNwogICAgLy8gdG9rZW5JZDogbmV3IFVpbnRONjQodG9rZW5JZCksCiAgICBmcmFtZV9kaWcgNAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwOQogICAgLy8gYW1vdW50OiBuZXcgVWludE42NChhbW91bnQpLAogICAgZnJhbWVfZGlnIDUKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMTAKICAgIC8vIG1ickFtb3VudDogbmV3IFVpbnRONjQodHhuTUJSRGVwb3NpdC5hbW91bnQpLAogICAgZnJhbWVfZGlnIC00CiAgICBndHhucyBBbW91bnQKICAgIGR1cAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEwMi0xMTEKICAgIC8vIGNvbnN0IGVzY3JvdyA9IG5ldyBFc2Nyb3dJbnN0YW5jZSh7CiAgICAvLyAgIGNyZWF0b3I6IG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICB0YWtlcjogdGFrZXIsCiAgICAvLyAgIGNyZWF0ZWRUaW1lOiBuZXcgVWludE42NChHbG9iYWwubGF0ZXN0VGltZXN0YW1wKSwKICAgIC8vICAgcmVzY3VlVGltZTogbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCArIHJlc2N1ZURlbGF5KSwKICAgIC8vICAgdG9rZW5JZDogbmV3IFVpbnRONjQodG9rZW5JZCksCiAgICAvLyAgIHNlY3JldEhhc2g6IHNlY3JldEhhc2gsCiAgICAvLyAgIGFtb3VudDogbmV3IFVpbnRONjQoYW1vdW50KSwKICAgIC8vICAgbWJyQW1vdW50OiBuZXcgVWludE42NCh0eG5NQlJEZXBvc2l0LmFtb3VudCksCiAgICAvLyB9KQogICAgdW5jb3ZlciA1CiAgICB1bmNvdmVyIDUKICAgIGNvbmNhdAogICAgdW5jb3ZlciA0CiAgICBjb25jYXQKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMTMKICAgIC8vIHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS52YWx1ZSA9IGVzY3Jvdy5jb3B5KCkKICAgIGZyYW1lX2RpZyA4CiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTE1CiAgICAvLyBjb25zdCBtYnJBdEVuZCA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjExNgogICAgLy8gYXNzZXJ0KG1ickF0RW5kIC0gbWJyQXRTdGFydCA9PT0gdHhuTUJSRGVwb3NpdC5hbW91bnQsICdNQlIgaW5jcmVtZW50IG11c3QgZXF1YWwgbWJyIGRlcG9zaXQgdHggYW1vdW50JykKICAgIGZyYW1lX2RpZyA3CiAgICAtCiAgICA9PQogICAgYXNzZXJ0IC8vIE1CUiBpbmNyZW1lbnQgbXVzdCBlcXVhbCBtYnIgZGVwb3NpdCB0eCBhbW91bnQKICAgIHJldHN1YgoKY3JlYXRlX2Vsc2VfYm9keUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjg3CiAgICAvLyBjb25zdCB0b2tlbklkTiA9IG5ldyBVaW50TjY0KHRva2VuSWQpCiAgICBmcmFtZV9kaWcgNAogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjg4CiAgICAvLyBsZXQgcHJldkRlcG9zaXRzOiB1aW50NjQgPSAwCiAgICBpbnRjXzEgLy8gMAogICAgZnJhbWVfYnVyeSAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIGZyYW1lX2J1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjg5CiAgICAvLyBpZiAodGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkTikuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGNyZWF0ZV9hZnRlcl9pZl9lbHNlQDEwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OTAKICAgIC8vIHByZXZEZXBvc2l0cyA9IHRoaXMuYWxsRGVwb3NpdHModG9rZW5JZE4pLnZhbHVlLm5hdGl2ZQogICAgZnJhbWVfZGlnIDEKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICBidG9pCiAgICBmcmFtZV9idXJ5IDMKCmNyZWF0ZV9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjkyCiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKHRva2VuSWROKS52YWx1ZSA9IG5ldyBVaW50TjY0KHByZXZEZXBvc2l0cyArIGFtb3VudCkKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgNQogICAgKwogICAgaXRvYgogICAgZnJhbWVfZGlnIDEKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozNwogICAgLy8gcHVibGljIGFsbERlcG9zaXRzID0gQm94TWFwPFVpbnRONjQsIFVpbnRONjQ+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjIDQgLy8gMHg2NDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo5NgogICAgLy8gaWYgKHRoaXMuYWxsRGVwb3NpdHModG9rZW5JZDApLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBieiBjcmVhdGVfYWZ0ZXJfaWZfZWxzZUAxMgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM3CiAgICAvLyBwdWJsaWMgYWxsRGVwb3NpdHMgPSBCb3hNYXA8VWludE42NCwgVWludE42ND4oeyBrZXlQcmVmaXg6ICdkJyB9KQogICAgYnl0ZWMgNCAvLyAweDY0MDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjk3CiAgICAvLyBwcmV2RGVwb3NpdHMgPSB0aGlzLmFsbERlcG9zaXRzKHRva2VuSWQwKS52YWx1ZS5uYXRpdmUKICAgIGJveF9nZXQKICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKCmNyZWF0ZV9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjk5CiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKHRva2VuSWQwKS52YWx1ZSA9IG5ldyBVaW50TjY0KHByZXZEZXBvc2l0czAgKyB0eG5NQlJEZXBvc2l0LmFtb3VudCkKICAgIGZyYW1lX2RpZyAtNAogICAgZ3R4bnMgQW1vdW50CiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlYyA0IC8vIDB4NjQwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OTkKICAgIC8vIHRoaXMuYWxsRGVwb3NpdHModG9rZW5JZDApLnZhbHVlID0gbmV3IFVpbnRONjQocHJldkRlcG9zaXRzMCArIHR4bk1CUkRlcG9zaXQuYW1vdW50KQogICAgc3dhcAogICAgYm94X3B1dAogICAgYiBjcmVhdGVfYWZ0ZXJfaWZfZWxzZUAxMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93Lm1ha2VIYXNoKHNlY3JldDogYnl0ZXMpIC0+IGJ5dGVzOgptYWtlSGFzaDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMjQtMTI1CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIG1ha2VIYXNoKHNlY3JldDogYXJjNC5EeW5hbWljQnl0ZXMpOiBieXRlcyB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMjYKICAgIC8vIHJldHVybiBvcC5rZWNjYWsyNTYoc2VjcmV0LmJ5dGVzKQogICAgZnJhbWVfZGlnIC0xCiAgICBrZWNjYWsyNTYKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93LmdldEVzY3JvdyhzZWNyZXRIYXNoOiBieXRlcykgLT4gYnl0ZXM6CmdldEVzY3JvdzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxMzUtMTM2CiAgICAvLyBAYXJjNC5hYmltZXRob2QoeyByZWFkb25seTogdHJ1ZSB9KQogICAgLy8gcHVibGljIGdldEVzY3JvdyhzZWNyZXRIYXNoOiBhcmM0LlN0YXRpY0J5dGVzPDMyPik6IEVzY3Jvd0luc3RhbmNlIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBwdWJsaWMgZXNjcm93cyA9IEJveE1hcDxhcmM0LlN0YXRpY0J5dGVzPDMyPiwgRXNjcm93SW5zdGFuY2U+KHsga2V5UHJlZml4OiAnZScgfSkKICAgIGJ5dGVjXzIgLy8gImUiCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjEzNwogICAgLy8gcmV0dXJuIHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS52YWx1ZQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93LmdldE1CUkRlcG9zaXRBbW91bnQoKSAtPiB1aW50NjQ6CmdldE1CUkRlcG9zaXRBbW91bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTQ5CiAgICAvLyBjb25zdCBuID0gbmV3IFVpbnRONjQoR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCkKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNTAKICAgIC8vIGNvbnN0IGFkZHJlc3MgPSBuZXcgQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE1MQogICAgLy8gY29uc3QgbWJyQXRTdGFydCA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE1Mi0xNjEKICAgIC8vIGNvbnN0IHNhbXBsZUJveCA9IG5ldyBFc2Nyb3dJbnN0YW5jZSh7CiAgICAvLyAgIGFtb3VudDogbiwKICAgIC8vICAgY3JlYXRlZFRpbWU6IG4sCiAgICAvLyAgIGNyZWF0b3I6IGFkZHJlc3MsCiAgICAvLyAgIG1ickFtb3VudDogbiwKICAgIC8vICAgcmVzY3VlVGltZTogbiwKICAgIC8vICAgc2VjcmV0SGFzaDogYnl0ZXMsCiAgICAvLyAgIHRha2VyOiBhZGRyZXNzLAogICAgLy8gICB0b2tlbklkOiBuLAogICAgLy8gfSkKICAgIGRpZyAyCiAgICBkaWcgMwogICAgY29uY2F0CiAgICBkaWcgMwogICAgY29uY2F0CiAgICBkaWcgMwogICAgY29uY2F0CiAgICB1bmNvdmVyIDMKICAgIGNvbmNhdAogICAgZGlnIDIKICAgIGNvbmNhdAogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNDgKICAgIC8vIGNvbnN0IGJ5dGVzID0gbmV3IFN0YXRpY0J5dGVzPDMyPigpCiAgICBieXRlY18zIC8vIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE1Mi0xNjEKICAgIC8vIGNvbnN0IHNhbXBsZUJveCA9IG5ldyBFc2Nyb3dJbnN0YW5jZSh7CiAgICAvLyAgIGFtb3VudDogbiwKICAgIC8vICAgY3JlYXRlZFRpbWU6IG4sCiAgICAvLyAgIGNyZWF0b3I6IGFkZHJlc3MsCiAgICAvLyAgIG1ickFtb3VudDogbiwKICAgIC8vICAgcmVzY3VlVGltZTogbiwKICAgIC8vICAgc2VjcmV0SGFzaDogYnl0ZXMsCiAgICAvLyAgIHRha2VyOiBhZGRyZXNzLAogICAgLy8gICB0b2tlbklkOiBuLAogICAgLy8gfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBwdWJsaWMgZXNjcm93cyA9IEJveE1hcDxhcmM0LlN0YXRpY0J5dGVzPDMyPiwgRXNjcm93SW5zdGFuY2U+KHsga2V5UHJlZml4OiAnZScgfSkKICAgIGJ5dGVjIDUgLy8gMHg2NTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNjIKICAgIC8vIHRoaXMuZXNjcm93cyhieXRlcykudmFsdWUgPSBzYW1wbGVCb3guY29weSgpCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTYzCiAgICAvLyBjb25zdCBtYnJBdEVuZCA9IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBwdWJsaWMgZXNjcm93cyA9IEJveE1hcDxhcmM0LlN0YXRpY0J5dGVzPDMyPiwgRXNjcm93SW5zdGFuY2U+KHsga2V5UHJlZml4OiAnZScgfSkKICAgIGJ5dGVjIDUgLy8gMHg2NTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxNjQKICAgIC8vIHRoaXMuZXNjcm93cyhieXRlcykuZGVsZXRlKCkKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE2NQogICAgLy8gcmV0dXJuIG1ickF0RW5kIC0gbWJyQXRTdGFydAogICAgc3dhcAogICAgLQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cubGF0ZXN0VGltZXN0YW1wKCkgLT4gdWludDY0OgpsYXRlc3RUaW1lc3RhbXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTc0CiAgICAvLyByZXR1cm4gR2xvYmFsLmxhdGVzdFRpbWVzdGFtcAogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjpFc2Nyb3cud2l0aGRyYXcoc2VjcmV0SGFzaDogYnl0ZXMsIHNlY3JldDogYnl0ZXMpIC0+IHZvaWQ6CndpdGhkcmF3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE4My0xODQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZCgpCiAgICAvLyBwdWJsaWMgd2l0aGRyYXcoc2VjcmV0SGFzaDogYXJjNC5TdGF0aWNCeXRlczwzMj4sIHNlY3JldDogYXJjNC5EeW5hbWljQnl0ZXMpIHsKICAgIHByb3RvIDIgMAogICAgaW50Y18xIC8vIDAKICAgIHB1c2hieXRlcyAiIgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBwdWJsaWMgZXNjcm93cyA9IEJveE1hcDxhcmM0LlN0YXRpY0J5dGVzPDMyPiwgRXNjcm93SW5zdGFuY2U+KHsga2V5UHJlZml4OiAnZScgfSkKICAgIGJ5dGVjXzIgLy8gImUiCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE4NQogICAgLy8gYXNzZXJ0KHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS5leGlzdHMsICdUaGUgZXNjcm93IGRvZXMgbm90IGV4aXN0cycpCiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIFRoZSBlc2Nyb3cgZG9lcyBub3QgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTg2CiAgICAvLyBhc3NlcnQob3Aua2VjY2FrMjU2KHNlY3JldC5ieXRlcykgPT09IHNlY3JldEhhc2guYnl0ZXMsICdUaGUgcGFzc3dvcmQgaXMgbm90IGNvcnJlY3QnKQogICAgZnJhbWVfZGlnIC0xCiAgICBrZWNjYWsyNTYKICAgIGZyYW1lX2RpZyAtMgogICAgPT0KICAgIGFzc2VydCAvLyBUaGUgcGFzc3dvcmQgaXMgbm90IGNvcnJlY3QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxODgKICAgIC8vIGNvbnN0IGVzY3JvdyA9IHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS52YWx1ZS5jb3B5KCkKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBjb3ZlciAzCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE5MAogICAgLy8gR2xvYmFsLmxhdGVzdFRpbWVzdGFtcCA8IGVzY3Jvdy5yZXNjdWVUaW1lLm5hdGl2ZSwKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGRpZyAxCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIDwKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoxODktMTkyCiAgICAvLyBhc3NlcnQoCiAgICAvLyAgIEdsb2JhbC5sYXRlc3RUaW1lc3RhbXAgPCBlc2Nyb3cucmVzY3VlVGltZS5uYXRpdmUsCiAgICAvLyAgICdFc2Nyb3cgY2FuIGJlIHJlZGVlbWVkIHdpdGggcGFzc3dvcmQgdXAgdG8gdGhlIHJlc2N1ZSB0aW1lJywKICAgIC8vICkKICAgIGFzc2VydCAvLyBFc2Nyb3cgY2FuIGJlIHJlZGVlbWVkIHdpdGggcGFzc3dvcmQgdXAgdG8gdGhlIHJlc2N1ZSB0aW1lCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MTk1CiAgICAvLyB0aGlzLmVzY3Jvd3Moc2VjcmV0SGFzaCkuZGVsZXRlKCkKICAgIHN3YXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE5OAogICAgLy8gbGV0IHNlbmRUbyA9IGVzY3Jvdy50YWtlcgogICAgZXh0cmFjdCA3MiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGR1cAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjE5OQogICAgLy8gaWYgKHNlbmRUbyA9PT0gbmV3IEFkZHJlc3MoKSkgewogICAgYnl0ZWNfMyAvLyBhZGRyIEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFZNUhGS1EKICAgID09CiAgICBieiB3aXRoZHJhd19hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMDAKICAgIC8vIHNlbmRUbyA9IG5ldyBBZGRyZXNzKFR4bi5zZW5kZXIpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9idXJ5IDMKCndpdGhkcmF3X2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMDIKICAgIC8vIGlmIChlc2Nyb3cudG9rZW5JZC5uYXRpdmUgPT09IDApIHsKICAgIGZyYW1lX2RpZyAyCiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEKICAgIGJueiB3aXRoZHJhd19lbHNlX2JvZHlANwogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIwMwogICAgLy8gaWYgKHNlbmRUbyA9PT0gZXNjcm93LmNyZWF0b3IpIHsKICAgIGZyYW1lX2RpZyAyCiAgICBleHRyYWN0IDQwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZHVwCiAgICBmcmFtZV9idXJ5IDAKICAgIGZyYW1lX2RpZyAzCiAgICA9PQogICAgYnogd2l0aGRyYXdfZWxzZV9ib2R5QDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMDQKICAgIC8vIHRoaXMuX3NlbmQoc2VuZFRvLCBlc2Nyb3cudG9rZW5JZC5uYXRpdmUsIGVzY3Jvdy5hbW91bnQubmF0aXZlICsgZXNjcm93Lm1ickFtb3VudC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgMgogICAgZHVwCiAgICBpbnRjXzIgLy8gMjQKICAgIGV4dHJhY3RfdWludDY0CiAgICBzd2FwCiAgICBpbnRjXzMgLy8gMzIKICAgIGV4dHJhY3RfdWludDY0CiAgICArCiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfZGlnIDEKICAgIHVuY292ZXIgMgogICAgY2FsbHN1YiBfc2VuZAogICAgcmV0c3ViCgp3aXRoZHJhd19lbHNlX2JvZHlANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMDYKICAgIC8vIHRoaXMuX3NlbmQoc2VuZFRvLCBlc2Nyb3cudG9rZW5JZC5uYXRpdmUsIGVzY3Jvdy5hbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDIKICAgIGR1cAogICAgaW50Y18yIC8vIDI0CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyAxCiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgX3NlbmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMDcKICAgIC8vIHRoaXMuX3NlbmQoZXNjcm93LmNyZWF0b3IsIDAsIGVzY3Jvdy5tYnJBbW91bnQubmF0aXZlKQogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgZnJhbWVfZGlnIDAKICAgIGludGNfMSAvLyAwCiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgX3NlbmQKICAgIHJldHN1YgoKd2l0aGRyYXdfZWxzZV9ib2R5QDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjExCiAgICAvLyB0aGlzLl9zZW5kKHNlbmRUbywgZXNjcm93LnRva2VuSWQubmF0aXZlLCBlc2Nyb3cuYW1vdW50Lm5hdGl2ZSkKICAgIGZyYW1lX2RpZyAyCiAgICBkdXAKICAgIGludGNfMiAvLyAyNAogICAgZXh0cmFjdF91aW50NjQKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9kaWcgMQogICAgdW5jb3ZlciAyCiAgICBjYWxsc3ViIF9zZW5kCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjEyCiAgICAvLyB0aGlzLl9zZW5kKGVzY3Jvdy5jcmVhdG9yLCAwLCBlc2Nyb3cubWJyQW1vdW50Lm5hdGl2ZSkKICAgIGR1cAogICAgZXh0cmFjdCA0MCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIHN3YXAKICAgIGludGNfMyAvLyAzMgogICAgZXh0cmFjdF91aW50NjQKICAgIGludGNfMSAvLyAwCiAgICBzd2FwCiAgICBjYWxsc3ViIF9zZW5kCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy5jYW5jZWwoc2VjcmV0SGFzaDogYnl0ZXMpIC0+IHZvaWQ6CmNhbmNlbDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMjAtMjIxCiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIGNhbmNlbChzZWNyZXRIYXNoOiBhcmM0LlN0YXRpY0J5dGVzPDMyPikgewogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIHB1YmxpYyBlc2Nyb3dzID0gQm94TWFwPGFyYzQuU3RhdGljQnl0ZXM8MzI+LCBFc2Nyb3dJbnN0YW5jZT4oeyBrZXlQcmVmaXg6ICdlJyB9KQogICAgYnl0ZWNfMiAvLyAiZSIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjIyCiAgICAvLyBhc3NlcnQodGhpcy5lc2Nyb3dzKHNlY3JldEhhc2gpLmV4aXN0cywgJ1RoZSBlc2Nyb3cgZG9lcyBub3QgZXhpc3RzJykKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVGhlIGVzY3JvdyBkb2VzIG5vdCBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMjMKICAgIC8vIGNvbnN0IGVzY3JvdyA9IHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS52YWx1ZS5jb3B5KCkKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBjb3ZlciAzCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjIyNAogICAgLy8gYXNzZXJ0KGVzY3Jvdy5yZXNjdWVUaW1lLm5hdGl2ZSA8IEdsb2JhbC5sYXRlc3RUaW1lc3RhbXAsICdUaGUgZXNjcm93IGNhbm5vdCBiZSBjYW5jZWxlZCB5ZXQnKQogICAgZHVwCiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIDwKICAgIGFzc2VydCAvLyBUaGUgZXNjcm93IGNhbm5vdCBiZSBjYW5jZWxlZCB5ZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMjcKICAgIC8vIHRoaXMuZXNjcm93cyhzZWNyZXRIYXNoKS5kZWxldGUoKQogICAgc3dhcAogICAgYm94X2RlbAogICAgcG9wCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjMwCiAgICAvLyBpZiAoZXNjcm93LnRva2VuSWQubmF0aXZlID09PSAwKSB7CiAgICBwdXNoaW50IDE2IC8vIDE2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBibnogY2FuY2VsX2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjMxCiAgICAvLyB0aGlzLl9zZW5kKGVzY3Jvdy5jcmVhdG9yLCBlc2Nyb3cudG9rZW5JZC5uYXRpdmUsIGVzY3Jvdy5hbW91bnQubmF0aXZlICsgZXNjcm93Lm1ickFtb3VudC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBleHRyYWN0IDQwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZGlnIDEKICAgIGludGNfMiAvLyAyNAogICAgZXh0cmFjdF91aW50NjQKICAgIHVuY292ZXIgMgogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgKwogICAgc3dhcAogICAgY292ZXIgMgogICAgY2FsbHN1YiBfc2VuZAogICAgcmV0c3ViCgpjYW5jZWxfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjM0CiAgICAvLyB0aGlzLl9zZW5kKGVzY3Jvdy5jcmVhdG9yLCBlc2Nyb3cudG9rZW5JZC5uYXRpdmUsIGVzY3Jvdy5hbW91bnQubmF0aXZlKQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgZXh0cmFjdCA0MCAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGRpZyAxCiAgICBpbnRjXzIgLy8gMjQKICAgIGV4dHJhY3RfdWludDY0CiAgICBkaWcgMQogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDIKICAgIGNhbGxzdWIgX3NlbmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyMzUKICAgIC8vIHRoaXMuX3NlbmQoZXNjcm93LmNyZWF0b3IsIDAsIGVzY3Jvdy5tYnJBbW91bnQubmF0aXZlKQogICAgc3dhcAogICAgaW50Y18zIC8vIDMyCiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18xIC8vIDAKICAgIHN3YXAKICAgIGNhbGxzdWIgX3NlbmQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93Lm9wdEluVG9Ub2tlbih0eG5EZXBvc2l0OiB1aW50NjQsIHRva2VuSWQ6IGJ5dGVzKSAtPiB2b2lkOgpvcHRJblRvVG9rZW46CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjQ1LTI0NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKCkKICAgIC8vIHB1YmxpYyBvcHRJblRvVG9rZW4odHhuRGVwb3NpdDogZ3R4bi5QYXltZW50VHhuLCB0b2tlbklkOiBVaW50TjY0KSB7CiAgICBwcm90byAyIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNDgKICAgIC8vIHR4bkRlcG9zaXQucmVjZWl2ZXIgPT09IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjQ3LTI1MAogICAgLy8gYXNzZXJ0KAogICAgLy8gICB0eG5EZXBvc2l0LnJlY2VpdmVyID09PSBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgJ1JlY2VpdmVyIG9mIHRoZSBvcHRpbiBmZWUgbXVzdCBiZSB0aGUgY3VycmVudCBzbWFydCBjb250cmFjdCcsCiAgICAvLyApCiAgICBhc3NlcnQgLy8gUmVjZWl2ZXIgb2YgdGhlIG9wdGluIGZlZSBtdXN0IGJlIHRoZSBjdXJyZW50IHNtYXJ0IGNvbnRyYWN0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjUxCiAgICAvLyBpZiAodG9rZW5JZC5uYXRpdmUgPT09IDApIHsKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgZHVwCiAgICBieiBvcHRJblRvVG9rZW5fYWZ0ZXJfaWZfZWxzZUA0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjU4CiAgICAvLyBhc3NlcnQodHhuRGVwb3NpdC5hbW91bnQgPT09IDEwOV8zMDAsICdPcHQgaW4gZmVlIHRvIGNvdmVyIE1CUiBmb3IgYXNzZXQgYW5kIGJveCB0byB0cmFjayBhbGwgZGVwb3NpdHMnKQogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgIHB1c2hpbnQgMTA5MzAwIC8vIDEwOTMwMAogICAgPT0KICAgIGFzc2VydCAvLyBPcHQgaW4gZmVlIHRvIGNvdmVyIE1CUiBmb3IgYXNzZXQgYW5kIGJveCB0byB0cmFjayBhbGwgZGVwb3NpdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNTkKICAgIC8vIGFzc2VydChHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5pc09wdGVkSW4oQXNzZXQodG9rZW5JZC5uYXRpdmUpKSA9PT0gZmFsc2UsICdBc3NldCBpcyBhbHJlYWR5IG9wdGVkIGluJykKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgIQogICAgYXNzZXJ0IC8vIEFzc2V0IGlzIGFscmVhZHkgb3B0ZWQgaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNjEtMjY4CiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICB4ZmVyQXNzZXQ6IHRva2VuSWQubmF0aXZlLAogICAgLy8gICAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjY1CiAgICAvLyBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNjQKICAgIC8vIGFzc2V0QW1vdW50OiAwLAogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjYxLTI2NwogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiB0b2tlbklkLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldEFtb3VudDogMCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICBwdXNoaW50IDQgLy8gNAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI2NgogICAgLy8gZmVlOiAwLAogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjYxLTI2OAogICAgLy8gaXR4bgogICAgLy8gICAuYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgICAgeGZlckFzc2V0OiB0b2tlbklkLm5hdGl2ZSwKICAgIC8vICAgICBhc3NldEFtb3VudDogMCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCm9wdEluVG9Ub2tlbl9hZnRlcl9pZl9lbHNlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyNzAKICAgIC8vIGFzc2VydCghdGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkKS5leGlzdHMsICdCb3ggd2l0aCBhbGwgZGVwb3NpdHMgbXVzdCBub3QgZXhpc3RzIHdoZW4gb3B0aW5nIGluJykKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQgLy8gQm94IHdpdGggYWxsIGRlcG9zaXRzIG11c3Qgbm90IGV4aXN0cyB3aGVuIG9wdGluZyBpbgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI3MQogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyh0b2tlbklkKS52YWx1ZSA9IG5ldyBVaW50TjY0KDApCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICBib3hfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy5hZG1pbldpdGhkcmF3YWJsZShhc3NldElkOiB1aW50NjQpIC0+IHVpbnQ2NDoKYWRtaW5XaXRoZHJhd2FibGU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjgwLTI4MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIHB1YmxpYyBhZG1pbldpdGhkcmF3YWJsZShhc3NldElkOiB1aW50NjQpOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MjgyCiAgICAvLyBjb25zdCBhc3NldElkTiA9IG5ldyBVaW50TjY0KGFzc2V0SWQpCiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyODMKICAgIC8vIGlmIChhc3NldElkID09PSAwKSB7CiAgICBmcmFtZV9kaWcgLTEKICAgIGJueiBhZG1pbldpdGhkcmF3YWJsZV9lbHNlX2JvZHlAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI4NQogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyODYKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6Mjg1LTI4NgogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlIC0KICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozNwogICAgLy8gcHVibGljIGFsbERlcG9zaXRzID0gQm94TWFwPFVpbnRONjQsIFVpbnRONjQ+KHsga2V5UHJlZml4OiAnZCcgfSkKICAgIGJ5dGVjXzAgLy8gImQiCiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI4NwogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkTikudmFsdWUubmF0aXZlCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjI4NS0yODcKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZSAtCiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyODQtMjg4CiAgICAvLyByZXR1cm4gKAogICAgLy8gICBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5iYWxhbmNlIC0KICAgIC8vICAgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZSAtCiAgICAvLyAgIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgLy8gKQogICAgcmV0c3ViCgphZG1pbldpdGhkcmF3YWJsZV9lbHNlX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyOTAKICAgIC8vIHJldHVybiBBc3NldChhc3NldElkKS5iYWxhbmNlKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKSAtIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBvcHRlZCBpbnRvIGFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czoyOTAKICAgIC8vIHJldHVybiBBc3NldChhc3NldElkKS5iYWxhbmNlKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKSAtIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGJ0b2kKICAgIC0KICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93LmFkbWluV2l0aGRyYXcoYXNzZXRJZDogdWludDY0KSAtPiB1aW50NjQ6CmFkbWluV2l0aGRyYXc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzAxLTMwMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kKHsgcmVhZG9ubHk6IHRydWUgfSkKICAgIC8vIHB1YmxpYyBhZG1pbldpdGhkcmF3KGFzc2V0SWQ6IHVpbnQ2NCk6IHVpbnQ2NCB7CiAgICBwcm90byAxIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMDMKICAgIC8vIGFzc2VydChUeG4uc2VuZGVyID09PSBHbG9iYWwuY3JlYXRvckFkZHJlc3MsICdPbmx5IGRlcGxveWVyIG9mIHRoaXMgYXBwIGNhbiB3aXRoZHJhdycpCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBkZXBsb3llciBvZiB0aGlzIGFwcCBjYW4gd2l0aGRyYXcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMDQKICAgIC8vIGNvbnN0IGFzc2V0SWROID0gbmV3IFVpbnRONjQoYXNzZXRJZCkKICAgIGZyYW1lX2RpZyAtMQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMwNQogICAgLy8gaWYgKGFzc2V0SWQgPT09IDApIHsKICAgIGZyYW1lX2RpZyAtMQogICAgYm56IGFkbWluV2l0aGRyYXdfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMDcKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzA4CiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5taW5CYWxhbmNlIC0KICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKICAgIGFzc2VydCAvLyBhY2NvdW50IGZ1bmRlZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMwNy0zMDgKICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLmJhbGFuY2UgLQogICAgLy8gR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MubWluQmFsYW5jZSAtCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMDkKICAgIC8vIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMDctMzA5CiAgICAvLyBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcy5iYWxhbmNlIC0KICAgIC8vIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgLy8gdGhpcy5hbGxEZXBvc2l0cyhhc3NldElkTikudmFsdWUubmF0aXZlCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzA2LTMxMAogICAgLy8gcmV0dXJuICgKICAgIC8vICAgR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MuYmFsYW5jZSAtCiAgICAvLyAgIEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzLm1pbkJhbGFuY2UgLQogICAgLy8gICB0aGlzLmFsbERlcG9zaXRzKGFzc2V0SWROKS52YWx1ZS5uYXRpdmUKICAgIC8vICkKICAgIHJldHN1YgoKYWRtaW5XaXRoZHJhd19lbHNlX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMTIKICAgIC8vIHJldHVybiBBc3NldChhc3NldElkKS5iYWxhbmNlKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKSAtIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBvcHRlZCBpbnRvIGFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgdW5jb3ZlciAyCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMTIKICAgIC8vIHJldHVybiBBc3NldChhc3NldElkKS5iYWxhbmNlKEdsb2JhbC5jdXJyZW50QXBwbGljYXRpb25BZGRyZXNzKSAtIHRoaXMuYWxsRGVwb3NpdHMoYXNzZXRJZE4pLnZhbHVlLm5hdGl2ZQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIGJ0b2kKICAgIC0KICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czo6RXNjcm93LnNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24odm90ZUtleTogYnl0ZXMsIHNlbGVjdGlvbktleTogYnl0ZXMsIHN0YXRlUHJvb2ZLZXk6IGJ5dGVzLCB2b3RlRmlyc3Q6IHVpbnQ2NCwgdm90ZUxhc3Q6IHVpbnQ2NCwgdm90ZUtleURpbHV0aW9uOiB1aW50NjQsIGZlZTogdWludDY0KSAtPiBieXRlczoKc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMTktMzI4CiAgICAvLyBAYXJjNC5hYmltZXRob2QoKQogICAgLy8gcHVibGljIHNlbmRPbmxpbmVLZXlSZWdpc3RyYXRpb24oCiAgICAvLyAgIHZvdGVLZXk6IGJ5dGVzLAogICAgLy8gICBzZWxlY3Rpb25LZXk6IGJ5dGVzLAogICAgLy8gICBzdGF0ZVByb29mS2V5OiBieXRlcywKICAgIC8vICAgdm90ZUZpcnN0OiB1aW50NjQsCiAgICAvLyAgIHZvdGVMYXN0OiB1aW50NjQsCiAgICAvLyAgIHZvdGVLZXlEaWx1dGlvbjogdWludDY0LAogICAgLy8gICBmZWU6IHVpbnQ2NCwKICAgIC8vICk6IGJ5dGVzIHsKICAgIHByb3RvIDcgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMyOQogICAgLy8gYXNzZXJ0KEdsb2JhbC5jcmVhdG9yQWRkcmVzcyA9PT0gVHhuLnNlbmRlciwgJ09ubHkgY3JlYXRvciBjYW4gdXNlIHRoaXMgbWV0aG9kJykKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgPT0KICAgIGFzc2VydCAvLyBPbmx5IGNyZWF0b3IgY2FuIHVzZSB0aGlzIG1ldGhvZAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjMzMC0zNDAKICAgIC8vIGNvbnN0IGl0eG5SZXN1bHQgPSBpdHhuCiAgICAvLyAgIC5rZXlSZWdpc3RyYXRpb24oewogICAgLy8gICAgIHNlbGVjdGlvbktleTogc2VsZWN0aW9uS2V5LAogICAgLy8gICAgIHN0YXRlUHJvb2ZLZXk6IHN0YXRlUHJvb2ZLZXksCiAgICAvLyAgICAgdm90ZUZpcnN0OiB2b3RlRmlyc3QsCiAgICAvLyAgICAgdm90ZUtleURpbHV0aW9uOiB2b3RlS2V5RGlsdXRpb24sCiAgICAvLyAgICAgdm90ZUxhc3Q6IHZvdGVMYXN0LAogICAgLy8gICAgIHZvdGVLZXk6IHZvdGVLZXksCiAgICAvLyAgICAgZmVlOiBmZWUsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC03CiAgICBpdHhuX2ZpZWxkIFZvdGVQSwogICAgZnJhbWVfZGlnIC0zCiAgICBpdHhuX2ZpZWxkIFZvdGVMYXN0CiAgICBmcmFtZV9kaWcgLTIKICAgIGl0eG5fZmllbGQgVm90ZUtleURpbHV0aW9uCiAgICBmcmFtZV9kaWcgLTQKICAgIGl0eG5fZmllbGQgVm90ZUZpcnN0CiAgICBmcmFtZV9kaWcgLTUKICAgIGl0eG5fZmllbGQgU3RhdGVQcm9vZlBLCiAgICBmcmFtZV9kaWcgLTYKICAgIGl0eG5fZmllbGQgU2VsZWN0aW9uUEsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMzAtMzM5CiAgICAvLyBjb25zdCBpdHhuUmVzdWx0ID0gaXR4bgogICAgLy8gICAua2V5UmVnaXN0cmF0aW9uKHsKICAgIC8vICAgICBzZWxlY3Rpb25LZXk6IHNlbGVjdGlvbktleSwKICAgIC8vICAgICBzdGF0ZVByb29mS2V5OiBzdGF0ZVByb29mS2V5LAogICAgLy8gICAgIHZvdGVGaXJzdDogdm90ZUZpcnN0LAogICAgLy8gICAgIHZvdGVLZXlEaWx1dGlvbjogdm90ZUtleURpbHV0aW9uLAogICAgLy8gICAgIHZvdGVMYXN0OiB2b3RlTGFzdCwKICAgIC8vICAgICB2b3RlS2V5OiB2b3RlS2V5LAogICAgLy8gICAgIGZlZTogZmVlLAogICAgLy8gICB9KQogICAgcHVzaGludCAyIC8vIDIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozMzAtMzQwCiAgICAvLyBjb25zdCBpdHhuUmVzdWx0ID0gaXR4bgogICAgLy8gICAua2V5UmVnaXN0cmF0aW9uKHsKICAgIC8vICAgICBzZWxlY3Rpb25LZXk6IHNlbGVjdGlvbktleSwKICAgIC8vICAgICBzdGF0ZVByb29mS2V5OiBzdGF0ZVByb29mS2V5LAogICAgLy8gICAgIHZvdGVGaXJzdDogdm90ZUZpcnN0LAogICAgLy8gICAgIHZvdGVLZXlEaWx1dGlvbjogdm90ZUtleURpbHV0aW9uLAogICAgLy8gICAgIHZvdGVMYXN0OiB2b3RlTGFzdCwKICAgIC8vICAgICB2b3RlS2V5OiB2b3RlS2V5LAogICAgLy8gICAgIGZlZTogZmVlLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIFR4SUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozNDEKICAgIC8vIHJldHVybiBpdHhuUmVzdWx0LnR4bklkCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6OkVzY3Jvdy5fc2VuZChyZWNlaXZlcjogYnl0ZXMsIGFzc2V0SWQ6IHVpbnQ2NCwgYW1vdW50OiB1aW50NjQpIC0+IHZvaWQ6Cl9zZW5kOgogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM0NgogICAgLy8gcHJpdmF0ZSBfc2VuZChyZWNlaXZlcjogQWRkcmVzcywgYXNzZXRJZDogdWludDY0LCBhbW91bnQ6IHVpbnQ2NCk6IHZvaWQgewogICAgcHJvdG8gMyAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzQ3CiAgICAvLyBsZXQgcHJldkRlcG9zaXRzOiB1aW50NjQgPSAwCiAgICBpbnRjXzEgLy8gMAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM0OAogICAgLy8gY29uc3QgdG9rZW5JZE4gPSBuZXcgVWludE42NChhc3NldElkKQogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzcKICAgIC8vIHB1YmxpYyBhbGxEZXBvc2l0cyA9IEJveE1hcDxVaW50TjY0LCBVaW50TjY0Pih7IGtleVByZWZpeDogJ2QnIH0pCiAgICBieXRlY18wIC8vICJkIgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozNTAKICAgIC8vIGlmICh0aGlzLmFsbERlcG9zaXRzKHRva2VuSWROKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYnogX3NlbmRfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzUxCiAgICAvLyBwcmV2RGVwb3NpdHMgPSB0aGlzLmFsbERlcG9zaXRzKHRva2VuSWROKS52YWx1ZS5uYXRpdmUKICAgIGZyYW1lX2RpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgYnRvaQogICAgZnJhbWVfYnVyeSAwCgpfc2VuZF9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzUzCiAgICAvLyB0aGlzLmFsbERlcG9zaXRzKHRva2VuSWROKS52YWx1ZSA9IG5ldyBVaW50TjY0KHByZXZEZXBvc2l0cyAtIGFtb3VudCkKICAgIGZyYW1lX2RpZyAwCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGl0b2IKICAgIGZyYW1lX2RpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzU1CiAgICAvLyBpZiAoYXNzZXRJZCA9PT0gMCkgewogICAgZnJhbWVfZGlnIC0yCiAgICBibnogX3NlbmRfZWxzZV9ib2R5QDUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozNTYtMzYyCiAgICAvLyBpdHhuCiAgICAvLyAgIC5wYXltZW50KHsKICAgIC8vICAgICBhbW91bnQ6IGFtb3VudCwKICAgIC8vICAgICBmZWU6IDAsCiAgICAvLyAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyLmJ5dGVzLAogICAgLy8gICB9KQogICAgLy8gICAuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIGZyYW1lX2RpZyAtMwogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM1Ni0zNjEKICAgIC8vIGl0eG4KICAgIC8vICAgLnBheW1lbnQoewogICAgLy8gICAgIGFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgICByZWNlaXZlcjogcmVjZWl2ZXIuYnl0ZXMsCiAgICAvLyAgIH0pCiAgICBpbnRjXzAgLy8gMQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM1OQogICAgLy8gZmVlOiAwLAogICAgaW50Y18xIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzU2LTM2MgogICAgLy8gaXR4bgogICAgLy8gICAucGF5bWVudCh7CiAgICAvLyAgICAgYW1vdW50OiBhbW91bnQsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICAgIHJlY2VpdmVyOiByZWNlaXZlci5ieXRlcywKICAgIC8vICAgfSkKICAgIC8vICAgLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgpfc2VuZF9lbHNlX2JvZHlANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozNjQtMzcxCiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICBhc3NldEFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlci5ieXRlcywKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIC0yCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgZnJhbWVfZGlnIC0zCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL2VzY3Jvdy9jb250cmFjdC5hbGdvLnRzOjM2NC0zNzAKICAgIC8vIGl0eG4KICAgIC8vICAgLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICAgIGFzc2V0QW1vdW50OiBhbW91bnQsCiAgICAvLyAgICAgZmVlOiAwLAogICAgLy8gICAgIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLmJ5dGVzLAogICAgLy8gICAgIHhmZXJBc3NldDogYXNzZXRJZCwKICAgIC8vICAgfSkKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvZXNjcm93L2NvbnRyYWN0LmFsZ28udHM6MzY3CiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzEgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9lc2Nyb3cvY29udHJhY3QuYWxnby50czozNjQtMzcxCiAgICAvLyBpdHhuCiAgICAvLyAgIC5hc3NldFRyYW5zZmVyKHsKICAgIC8vICAgICBhc3NldEFtb3VudDogYW1vdW50LAogICAgLy8gICAgIGZlZTogMCwKICAgIC8vICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlci5ieXRlcywKICAgIC8vICAgICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCiAgICAvLyAgIH0pCiAgICAvLyAgIC5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAQAYICYGAWQEFR98dQFlIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACWQAAAAAAAAAACFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxG0EBaYILBFagaL0ENi1H1wS/iztwBK2hs9cEZMzZMAQR+SfQBKjH+yAE45RpXQRk0teCBMgeIo0Exh1W9TYaAI4LAPAA1QDCALEAoACOAH8AZgBRADwAAiNDMRkURDEYRDYaAVcCADYaAlcCADYaA1cCADYaBBc2GgUXNhoGFzYaBxeIA/JJFRZXBgJMUClMULAiQzEZFEQxGEQ2GgEXiAOhFilMULAiQzEZFEQxGEQ2GgEXiANdFilMULAiQzEZFEQxGEQxFiIJSTgQIhJENhoBiALuIkMxGRREMRhENhoBiAKGIkMxGRREMRhENhoBNhoCiAHcIkMxGRREMRhEiAHNFilMULAiQzEZFEQxGESIAYwWKUxQsCJDMRkURDEYRDYaAYgBbilMULAiQzEZFEQxGEQ2GgGIAVRJFRZXBgJMUClMULAiQzEZFEQxGEQxFoECCTEWIglJOBAiEkQ2GgEXNhoCNhoDiAANIkMxGUD+5jEYFEQiQ4oFACNJgABJI0cCi/4rEhREMgpzAUSL/DgHMgoSRCqL/lBJvUUBFESL+zgQSSISQQAZi/s4BzIKEkSL+zgAMQASRIv7OAiMBSKMBosJgQQSQQAXi/s4FDIKEkSL+zgSjAWL+zgRjAQijAaLBUSLBkSLBEAAZIsEFiOMAihMUEmMAL1FAUEAB4sAvkQXjAKLAosFCIv8OAgIFosATL8xADIHFjIHi/0IFosEFosFFov8OAhJFk8FTwVQTwRQTwNQTFBPAlCL/1CL/lCLCEy/MgpzAUSLBwkSRImLBBYjjAMoTFBJjAG9RQFBAAeLAb5EF4wDiwOLBQgWiwFMvycEvUUBQQAGJwS+RQFEi/w4CBYnBEy/Qv+HigEBi/8CiYoBASqL/1C+RIkyBxYxADIKcwFESwJLA1BLA1BLA1BPA1BLAlBPAlArUCcFTL8yCnMBRCcFvEhMCYkyB4mKAgAjgAAqi/5QSb1FAUSL/wKL/hJESb5MSU4CTgNEMgdLAYEIWwxETLxIV0ggSSsSQQAEMQCMA4sCgRBbSYwBQAA6iwJXKCBJjACLAxJBABOLAkkkW0wlWwiLA4sBTwKIAXGJiwJJJFuLA4sBTwKIAWIlW4sAI08CiAFYiYsCSSRbiwOLAU8CiAFJSVcoIEwlWyNMiAE9iYoBACqL/1BJvUUBREm+TElOAk4DREmBCFsyBwxETLxIgRBbSUAAFosASVcoIEsBJFtPAiVbCExOAogBAImLAElXKCBLASRbSwFPBE8CiADsTCVbI0yIAOSJigIAi/44BzIKEkSL/xdJQQApi/44CIH01QYSRDIKiwBJTgJwAEUBFESxMgqyFCOyErIRgQSyECOyAbMoi/9QSb1FARREgAgAAAAAAAAAAL+JigEBi/8Wi/9AABQyCnMARDIKcwFECShPAlC+RBcJiTIKi/9wAEQoTwJQvkQXCYmKAQExADIJEkSL/xaL/0AAFDIKcwBEMgpzAUQJKE8CUL5EFwmJMgqL/3AARChPAlC+RBcJiYoHATIJMQASRLGL+bIKi/2yDYv+sg6L/LIMi/uyP4v6sguBArIQi/+yAbO0F4mKAwAji/4WKExQSb1FAUEAB4sBvkQXjACLAIv/CRaLAUy/i/5AABGxi/2yB4v/sggishAjsgGzibGL/rIRi/2yFIv/shKBBLIQI7IBs4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type EscrowInstance = {
  createdTime: bigint,
  rescueTime: bigint,
  tokenId: bigint,
  amount: bigint,
  mbrAmount: bigint,
  creator: string,
  taker: string,
  secretHash: Uint8Array
}


/**
 * Converts the ABI tuple representation of a EscrowInstance to the struct representation
 */
export function EscrowInstanceFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint, string, string, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.EscrowInstance, APP_SPEC.structs) as EscrowInstance
}

/**
 * The argument types for the Escrow contract
 */
export type EscrowArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create(txn,pay,uint64,byte[32],address)void': {
      /**
       * The deposit of the asset
       */
      txnDeposit: AppMethodCallTransactionArgument
      /**
       * The deposit of native token to cover MBR. This deposit is returned to creator on withdrawal or rescue operation
       */
      txnMbrDeposit: AppMethodCallTransactionArgument
      /**
       * The number seconds from the current time after the tx can be canceled
       */
      rescueDelay: bigint | number
      /**
       * Hash of the secret in keccak256
       */
      secretHash: Uint8Array
      /**
       * Creator of the escrow can set taker address. If taker address is set, with secret the funds can be routed only to this address. If the taker is zero address, anyone who claims with correct password, will receive the assets
       */
      taker: string
    }
    'makeHash(byte[])byte[]': {
      /**
       * The secret
       */
      secret: Uint8Array
    }
    'getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])': {
      secretHash: Uint8Array
    }
    'getMBRDepositAmount()uint64': Record<string, never>
    'latestTimestamp()uint64': Record<string, never>
    'withdraw(byte[32],byte[])void': {
      /**
       * Hash of the secret in keccak256
       */
      secretHash: Uint8Array
      /**
       * Secret
       */
      secret: Uint8Array
    }
    'cancel(byte[32])void': {
      /**
       * Hash of the secret in keccak256
       */
      secretHash: Uint8Array
    }
    'optInToToken(pay,uint64)void': {
      /**
       * Deposit tx
       */
      txnDeposit: AppMethodCallTransactionArgument
      tokenId: bigint | number
    }
    'adminWithdrawable(uint64)uint64': {
      /**
       * Asset
       */
      assetId: bigint | number
    }
    'adminWithdraw(uint64)uint64': {
      /**
       * Asset
       */
      assetId: bigint | number
    }
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': {
      voteKey: Uint8Array
      selectionKey: Uint8Array
      stateProofKey: Uint8Array
      voteFirst: bigint | number
      voteLast: bigint | number
      voteKeyDilution: bigint | number
      fee: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create(txn,pay,uint64,byte[32],address)void': [txnDeposit: AppMethodCallTransactionArgument, txnMbrDeposit: AppMethodCallTransactionArgument, rescueDelay: bigint | number, secretHash: Uint8Array, taker: string]
    'makeHash(byte[])byte[]': [secret: Uint8Array]
    'getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])': [secretHash: Uint8Array]
    'getMBRDepositAmount()uint64': []
    'latestTimestamp()uint64': []
    'withdraw(byte[32],byte[])void': [secretHash: Uint8Array, secret: Uint8Array]
    'cancel(byte[32])void': [secretHash: Uint8Array]
    'optInToToken(pay,uint64)void': [txnDeposit: AppMethodCallTransactionArgument, tokenId: bigint | number]
    'adminWithdrawable(uint64)uint64': [assetId: bigint | number]
    'adminWithdraw(uint64)uint64': [assetId: bigint | number]
    'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': [voteKey: Uint8Array, selectionKey: Uint8Array, stateProofKey: Uint8Array, voteFirst: bigint | number, voteLast: bigint | number, voteKeyDilution: bigint | number, fee: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type EscrowReturns = {
  'create(txn,pay,uint64,byte[32],address)void': void
  'makeHash(byte[])byte[]': Uint8Array
  'getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])': EscrowInstance
  'getMBRDepositAmount()uint64': bigint
  'latestTimestamp()uint64': bigint
  'withdraw(byte[32],byte[])void': void
  'cancel(byte[32])void': void
  'optInToToken(pay,uint64)void': void
  'adminWithdrawable(uint64)uint64': bigint
  'adminWithdraw(uint64)uint64': bigint
  'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]': Uint8Array
}

/**
 * Defines the types of available calls and state of the Escrow smart contract.
 */
export type EscrowTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create(txn,pay,uint64,byte[32],address)void' | 'create', {
      argsObj: EscrowArgs['obj']['create(txn,pay,uint64,byte[32],address)void']
      argsTuple: EscrowArgs['tuple']['create(txn,pay,uint64,byte[32],address)void']
      returns: EscrowReturns['create(txn,pay,uint64,byte[32],address)void']
    }>
    & Record<'makeHash(byte[])byte[]' | 'makeHash', {
      argsObj: EscrowArgs['obj']['makeHash(byte[])byte[]']
      argsTuple: EscrowArgs['tuple']['makeHash(byte[])byte[]']
      /**
       * Hash of the secret
       */
      returns: EscrowReturns['makeHash(byte[])byte[]']
    }>
    & Record<'getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])' | 'getEscrow', {
      argsObj: EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']
      argsTuple: EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']
      returns: EscrowReturns['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']
    }>
    & Record<'getMBRDepositAmount()uint64' | 'getMBRDepositAmount', {
      argsObj: EscrowArgs['obj']['getMBRDepositAmount()uint64']
      argsTuple: EscrowArgs['tuple']['getMBRDepositAmount()uint64']
      returns: EscrowReturns['getMBRDepositAmount()uint64']
    }>
    & Record<'latestTimestamp()uint64' | 'latestTimestamp', {
      argsObj: EscrowArgs['obj']['latestTimestamp()uint64']
      argsTuple: EscrowArgs['tuple']['latestTimestamp()uint64']
      /**
       * Time as blockchain sees it
       */
      returns: EscrowReturns['latestTimestamp()uint64']
    }>
    & Record<'withdraw(byte[32],byte[])void' | 'withdraw', {
      argsObj: EscrowArgs['obj']['withdraw(byte[32],byte[])void']
      argsTuple: EscrowArgs['tuple']['withdraw(byte[32],byte[])void']
      returns: EscrowReturns['withdraw(byte[32],byte[])void']
    }>
    & Record<'cancel(byte[32])void' | 'cancel', {
      argsObj: EscrowArgs['obj']['cancel(byte[32])void']
      argsTuple: EscrowArgs['tuple']['cancel(byte[32])void']
      returns: EscrowReturns['cancel(byte[32])void']
    }>
    & Record<'optInToToken(pay,uint64)void' | 'optInToToken', {
      argsObj: EscrowArgs['obj']['optInToToken(pay,uint64)void']
      argsTuple: EscrowArgs['tuple']['optInToToken(pay,uint64)void']
      returns: EscrowReturns['optInToToken(pay,uint64)void']
    }>
    & Record<'adminWithdrawable(uint64)uint64' | 'adminWithdrawable', {
      argsObj: EscrowArgs['obj']['adminWithdrawable(uint64)uint64']
      argsTuple: EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']
      /**
       * Withdrawable amount
       */
      returns: EscrowReturns['adminWithdrawable(uint64)uint64']
    }>
    & Record<'adminWithdraw(uint64)uint64' | 'adminWithdraw', {
      argsObj: EscrowArgs['obj']['adminWithdraw(uint64)uint64']
      argsTuple: EscrowArgs['tuple']['adminWithdraw(uint64)uint64']
      returns: EscrowReturns['adminWithdraw(uint64)uint64']
    }>
    & Record<'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]' | 'sendOnlineKeyRegistration', {
      argsObj: EscrowArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
      argsTuple: EscrowArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
      returns: EscrowReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        /**
         * List of all escrows
         */
        escrows: Map<Uint8Array, EscrowInstance>
        /**
         * All deposits of all escrows. Deployer of the contract can request any staking rewards accured to any of the assets excess of the all deposits
         */
        allDeposits: Map<bigint | number, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EscrowSignatures = keyof EscrowTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EscrowNonVoidMethodSignatures = keyof EscrowTypes['methods'] extends infer T ? T extends keyof EscrowTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Escrow smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EscrowSignatures> = EscrowTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Escrow smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscrowSignatures> = EscrowTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = EscrowTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EscrowCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EscrowDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EscrowCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Escrow smart contract
 */
export abstract class EscrowParamsFactory {
  /**
   * Constructs a no op call for the create(txn,pay,uint64,byte[32],address)void ABI method
   *
   * Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static create(params: CallParams<EscrowArgs['obj']['create(txn,pay,uint64,byte[32],address)void'] | EscrowArgs['tuple']['create(txn,pay,uint64,byte[32],address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create(txn,pay,uint64,byte[32],address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.txnMbrDeposit, params.args.rescueDelay, params.args.secretHash, params.args.taker],
    }
  }
  /**
   * Constructs a no op call for the makeHash(byte[])byte[] ABI method
   *
   * Return hash of the secret. Readonly method using the simulate method is for free.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static makeHash(params: CallParams<EscrowArgs['obj']['makeHash(byte[])byte[]'] | EscrowArgs['tuple']['makeHash(byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'makeHash(byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.secret],
    }
  }
  /**
   * Constructs a no op call for the getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32]) ABI method
   *
   * EscrowInstance by secret
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getEscrow(params: CallParams<EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.secretHash],
    }
  }
  /**
   * Constructs a no op call for the getMBRDepositAmount()uint64 ABI method
   *
   * Returns the amount to be deposited
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMbrDepositAmount(params: CallParams<EscrowArgs['obj']['getMBRDepositAmount()uint64'] | EscrowArgs['tuple']['getMBRDepositAmount()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMBRDepositAmount()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the latestTimestamp()uint64 ABI method
   *
   * Get current time
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static latestTimestamp(params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'latestTimestamp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw(byte[32],byte[])void ABI method
   *
   * Withdraw from escrow with known password
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<EscrowArgs['obj']['withdraw(byte[32],byte[])void'] | EscrowArgs['tuple']['withdraw(byte[32],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(byte[32],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.secretHash, params.args.secret],
    }
  }
  /**
   * Constructs a no op call for the cancel(byte[32])void ABI method
   *
   * After the time has passed, anyone can call this method to return funds to the original sender of the escrow account
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static cancel(params: CallParams<EscrowArgs['obj']['cancel(byte[32])void'] | EscrowArgs['tuple']['cancel(byte[32])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'cancel(byte[32])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.secretHash],
    }
  }
  /**
   * Constructs a no op call for the optInToToken(pay,uint64)void ABI method
   *
   * Anyone can optin this contract to his ASA if he deposits MBR
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToToken(params: CallParams<EscrowArgs['obj']['optInToToken(pay,uint64)void'] | EscrowArgs['tuple']['optInToToken(pay,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToToken(pay,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.txnDeposit, params.args.tokenId],
    }
  }
  /**
   * Constructs a no op call for the adminWithdrawable(uint64)uint64 ABI method
   *
   * Shows the current withdrawable amount for the admin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static adminWithdrawable(params: CallParams<EscrowArgs['obj']['adminWithdrawable(uint64)uint64'] | EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'adminWithdrawable(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the adminWithdraw(uint64)uint64 ABI method
   *
   * Method to exctract excess assets from smart contract address by the admin
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static adminWithdraw(params: CallParams<EscrowArgs['obj']['adminWithdraw(uint64)uint64'] | EscrowArgs['tuple']['adminWithdraw(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'adminWithdraw(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] ABI method
   *
   * Creator can perfom key registration for this escrow contract, so that he can receive staking rewards
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sendOnlineKeyRegistration(params: CallParams<EscrowArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | EscrowArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.voteKey, params.args.selectionKey, params.args.stateProofKey, params.args.voteFirst, params.args.voteLast, params.args.voteKeyDilution, params.args.fee],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Escrow smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EscrowFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EscrowFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EscrowClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EscrowClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Escrow smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EscrowDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new EscrowClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new EscrowClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Escrow smart contract
 */
export class EscrowClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EscrowClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Escrow app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EscrowClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EscrowNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EscrowClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EscrowClient> {
    return new EscrowClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EscrowClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EscrowClient> {
    return new EscrowClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `create(txn,pay,uint64,byte[32],address)void` ABI method.
     *
     * Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    create: (params: CallParams<EscrowArgs['obj']['create(txn,pay,uint64,byte[32],address)void'] | EscrowArgs['tuple']['create(txn,pay,uint64,byte[32],address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.create(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `makeHash(byte[])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return hash of the secret. Readonly method using the simulate method is for free.
     *
     * @param params The params for the smart contract call
     * @returns The call params: Hash of the secret
     */
    makeHash: (params: CallParams<EscrowArgs['obj']['makeHash(byte[])byte[]'] | EscrowArgs['tuple']['makeHash(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.makeHash(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * EscrowInstance by secret
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getEscrow: (params: CallParams<EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.getEscrow(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `getMBRDepositAmount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the amount to be deposited
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMbrDepositAmount: (params: CallParams<EscrowArgs['obj']['getMBRDepositAmount()uint64'] | EscrowArgs['tuple']['getMBRDepositAmount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowParamsFactory.getMbrDepositAmount(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call params: Time as blockchain sees it
     */
    latestTimestamp: (params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowParamsFactory.latestTimestamp(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `withdraw(byte[32],byte[])void` ABI method.
     *
     * Withdraw from escrow with known password
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<EscrowArgs['obj']['withdraw(byte[32],byte[])void'] | EscrowArgs['tuple']['withdraw(byte[32],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `cancel(byte[32])void` ABI method.
     *
     * After the time has passed, anyone can call this method to return funds to the original sender of the escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    cancel: (params: CallParams<EscrowArgs['obj']['cancel(byte[32])void'] | EscrowArgs['tuple']['cancel(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.cancel(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `optInToToken(pay,uint64)void` ABI method.
     *
     * Anyone can optin this contract to his ASA if he deposits MBR
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToToken: (params: CallParams<EscrowArgs['obj']['optInToToken(pay,uint64)void'] | EscrowArgs['tuple']['optInToToken(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.optInToToken(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `adminWithdrawable(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Shows the current withdrawable amount for the admin
     *
     * @param params The params for the smart contract call
     * @returns The call params: Withdrawable amount
     */
    adminWithdrawable: (params: CallParams<EscrowArgs['obj']['adminWithdrawable(uint64)uint64'] | EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.adminWithdrawable(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `adminWithdraw(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Method to exctract excess assets from smart contract address by the admin
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    adminWithdraw: (params: CallParams<EscrowArgs['obj']['adminWithdraw(uint64)uint64'] | EscrowArgs['tuple']['adminWithdraw(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.adminWithdraw(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Creator can perfom key registration for this escrow contract, so that he can receive staking rewards
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sendOnlineKeyRegistration: (params: CallParams<EscrowArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | EscrowArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.sendOnlineKeyRegistration(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `create(txn,pay,uint64,byte[32],address)void` ABI method.
     *
     * Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    create: (params: CallParams<EscrowArgs['obj']['create(txn,pay,uint64,byte[32],address)void'] | EscrowArgs['tuple']['create(txn,pay,uint64,byte[32],address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.create(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `makeHash(byte[])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return hash of the secret. Readonly method using the simulate method is for free.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Hash of the secret
     */
    makeHash: (params: CallParams<EscrowArgs['obj']['makeHash(byte[])byte[]'] | EscrowArgs['tuple']['makeHash(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.makeHash(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * EscrowInstance by secret
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getEscrow: (params: CallParams<EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.getEscrow(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `getMBRDepositAmount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the amount to be deposited
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMbrDepositAmount: (params: CallParams<EscrowArgs['obj']['getMBRDepositAmount()uint64'] | EscrowArgs['tuple']['getMBRDepositAmount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.getMbrDepositAmount(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Time as blockchain sees it
     */
    latestTimestamp: (params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.latestTimestamp(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `withdraw(byte[32],byte[])void` ABI method.
     *
     * Withdraw from escrow with known password
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<EscrowArgs['obj']['withdraw(byte[32],byte[])void'] | EscrowArgs['tuple']['withdraw(byte[32],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `cancel(byte[32])void` ABI method.
     *
     * After the time has passed, anyone can call this method to return funds to the original sender of the escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    cancel: (params: CallParams<EscrowArgs['obj']['cancel(byte[32])void'] | EscrowArgs['tuple']['cancel(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.cancel(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `optInToToken(pay,uint64)void` ABI method.
     *
     * Anyone can optin this contract to his ASA if he deposits MBR
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToToken: (params: CallParams<EscrowArgs['obj']['optInToToken(pay,uint64)void'] | EscrowArgs['tuple']['optInToToken(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.optInToToken(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `adminWithdrawable(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Shows the current withdrawable amount for the admin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: Withdrawable amount
     */
    adminWithdrawable: (params: CallParams<EscrowArgs['obj']['adminWithdrawable(uint64)uint64'] | EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.adminWithdrawable(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `adminWithdraw(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Method to exctract excess assets from smart contract address by the admin
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    adminWithdraw: (params: CallParams<EscrowArgs['obj']['adminWithdraw(uint64)uint64'] | EscrowArgs['tuple']['adminWithdraw(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.adminWithdraw(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Creator can perfom key registration for this escrow contract, so that he can receive staking rewards
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sendOnlineKeyRegistration: (params: CallParams<EscrowArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | EscrowArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.sendOnlineKeyRegistration(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `create(txn,pay,uint64,byte[32],address)void` ABI method.
     *
     * Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    create: async (params: CallParams<EscrowArgs['obj']['create(txn,pay,uint64,byte[32],address)void'] | EscrowArgs['tuple']['create(txn,pay,uint64,byte[32],address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.create(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['create(txn,pay,uint64,byte[32],address)void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `makeHash(byte[])byte[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Return hash of the secret. Readonly method using the simulate method is for free.
     *
     * @param params The params for the smart contract call
     * @returns The call result: Hash of the secret
     */
    makeHash: async (params: CallParams<EscrowArgs['obj']['makeHash(byte[])byte[]'] | EscrowArgs['tuple']['makeHash(byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.makeHash(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['makeHash(byte[])byte[]'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * EscrowInstance by secret
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getEscrow: async (params: CallParams<EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.getEscrow(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `getMBRDepositAmount()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Returns the amount to be deposited
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMbrDepositAmount: async (params: CallParams<EscrowArgs['obj']['getMBRDepositAmount()uint64'] | EscrowArgs['tuple']['getMBRDepositAmount()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.getMbrDepositAmount(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['getMBRDepositAmount()uint64'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current time
     *
     * @param params The params for the smart contract call
     * @returns The call result: Time as blockchain sees it
     */
    latestTimestamp: async (params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.latestTimestamp(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['latestTimestamp()uint64'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `withdraw(byte[32],byte[])void` ABI method.
     *
     * Withdraw from escrow with known password
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<EscrowArgs['obj']['withdraw(byte[32],byte[])void'] | EscrowArgs['tuple']['withdraw(byte[32],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['withdraw(byte[32],byte[])void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `cancel(byte[32])void` ABI method.
     *
     * After the time has passed, anyone can call this method to return funds to the original sender of the escrow account
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    cancel: async (params: CallParams<EscrowArgs['obj']['cancel(byte[32])void'] | EscrowArgs['tuple']['cancel(byte[32])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.cancel(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['cancel(byte[32])void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `optInToToken(pay,uint64)void` ABI method.
     *
     * Anyone can optin this contract to his ASA if he deposits MBR
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToToken: async (params: CallParams<EscrowArgs['obj']['optInToToken(pay,uint64)void'] | EscrowArgs['tuple']['optInToToken(pay,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.optInToToken(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['optInToToken(pay,uint64)void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `adminWithdrawable(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Shows the current withdrawable amount for the admin
     *
     * @param params The params for the smart contract call
     * @returns The call result: Withdrawable amount
     */
    adminWithdrawable: async (params: CallParams<EscrowArgs['obj']['adminWithdrawable(uint64)uint64'] | EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.adminWithdrawable(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['adminWithdrawable(uint64)uint64'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `adminWithdraw(uint64)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Method to exctract excess assets from smart contract address by the admin
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    adminWithdraw: async (params: CallParams<EscrowArgs['obj']['adminWithdraw(uint64)uint64'] | EscrowArgs['tuple']['adminWithdraw(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.adminWithdraw(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['adminWithdraw(uint64)uint64'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]` ABI method.
     *
     * Creator can perfom key registration for this escrow contract, so that he can receive staking rewards
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sendOnlineKeyRegistration: async (params: CallParams<EscrowArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | EscrowArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.sendOnlineKeyRegistration(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EscrowClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `makeHash(byte[])byte[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Return hash of the secret. Readonly method using the simulate method is for free.
   *
   * @param params The params for the smart contract call
   * @returns The call result: Hash of the secret
   */
  async makeHash(params: CallParams<EscrowArgs['obj']['makeHash(byte[])byte[]'] | EscrowArgs['tuple']['makeHash(byte[])byte[]']>) {
    const result = await this.appClient.send.call(EscrowParamsFactory.makeHash(params))
    return result.return as unknown as EscrowReturns['makeHash(byte[])byte[]']
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * EscrowInstance by secret
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getEscrow(params: CallParams<EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']>) {
    const result = await this.appClient.send.call(EscrowParamsFactory.getEscrow(params))
    return result.return as unknown as EscrowReturns['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `getMBRDepositAmount()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Returns the amount to be deposited
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMbrDepositAmount(params: CallParams<EscrowArgs['obj']['getMBRDepositAmount()uint64'] | EscrowArgs['tuple']['getMBRDepositAmount()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(EscrowParamsFactory.getMbrDepositAmount(params))
    return result.return as unknown as EscrowReturns['getMBRDepositAmount()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `latestTimestamp()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current time
   *
   * @param params The params for the smart contract call
   * @returns The call result: Time as blockchain sees it
   */
  async latestTimestamp(params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(EscrowParamsFactory.latestTimestamp(params))
    return result.return as unknown as EscrowReturns['latestTimestamp()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `adminWithdrawable(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Shows the current withdrawable amount for the admin
   *
   * @param params The params for the smart contract call
   * @returns The call result: Withdrawable amount
   */
  async adminWithdrawable(params: CallParams<EscrowArgs['obj']['adminWithdrawable(uint64)uint64'] | EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']>) {
    const result = await this.appClient.send.call(EscrowParamsFactory.adminWithdrawable(params))
    return result.return as unknown as EscrowReturns['adminWithdrawable(uint64)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the Escrow smart contract using the `adminWithdraw(uint64)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Method to exctract excess assets from smart contract address by the admin
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async adminWithdraw(params: CallParams<EscrowArgs['obj']['adminWithdraw(uint64)uint64'] | EscrowArgs['tuple']['adminWithdraw(uint64)uint64']>) {
    const result = await this.appClient.send.call(EscrowParamsFactory.adminWithdraw(params))
    return result.return as unknown as EscrowReturns['adminWithdraw(uint64)uint64']
  }

  /**
   * Methods to access state for the current Escrow app
   */
  state = {
    /**
     * Methods to access box state for the current Escrow app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the escrows map in box state
       */
      escrows: {
        /**
         * Get all current values of the escrows map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, EscrowInstance>> => { return (await this.appClient.state.box.getMap("escrows")) as Map<Uint8Array, EscrowInstance> },
        /**
         * Get a current value of the escrows map by key from box state
         */
        value: async (key: Uint8Array): Promise<EscrowInstance | undefined> => { return await this.appClient.state.box.getMapValue("escrows", key) as EscrowInstance | undefined },
      },
      /**
       * Get values from the allDeposits map in box state
       */
      allDeposits: {
        /**
         * Get all current values of the allDeposits map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("allDeposits")) as Map<bigint, bigint> },
        /**
         * Get a current value of the allDeposits map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("allDeposits", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): EscrowComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create(txn,pay,uint64,byte[32],address)void method call against the Escrow contract
       */
      create(params: CallParams<EscrowArgs['obj']['create(txn,pay,uint64,byte[32],address)void'] | EscrowArgs['tuple']['create(txn,pay,uint64,byte[32],address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.create(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a makeHash(byte[])byte[] method call against the Escrow contract
       */
      makeHash(params: CallParams<EscrowArgs['obj']['makeHash(byte[])byte[]'] | EscrowArgs['tuple']['makeHash(byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.makeHash(params)))
        resultMappers.push((v) => client.decodeReturnValue('makeHash(byte[])byte[]', v))
        return this
      },
      /**
       * Add a getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32]) method call against the Escrow contract
       */
      getEscrow(params: CallParams<EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getEscrow(params)))
        resultMappers.push((v) => client.decodeReturnValue('getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])', v))
        return this
      },
      /**
       * Add a getMBRDepositAmount()uint64 method call against the Escrow contract
       */
      getMbrDepositAmount(params: CallParams<EscrowArgs['obj']['getMBRDepositAmount()uint64'] | EscrowArgs['tuple']['getMBRDepositAmount()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMbrDepositAmount(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMBRDepositAmount()uint64', v))
        return this
      },
      /**
       * Add a latestTimestamp()uint64 method call against the Escrow contract
       */
      latestTimestamp(params: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.latestTimestamp(params)))
        resultMappers.push((v) => client.decodeReturnValue('latestTimestamp()uint64', v))
        return this
      },
      /**
       * Add a withdraw(byte[32],byte[])void method call against the Escrow contract
       */
      withdraw(params: CallParams<EscrowArgs['obj']['withdraw(byte[32],byte[])void'] | EscrowArgs['tuple']['withdraw(byte[32],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a cancel(byte[32])void method call against the Escrow contract
       */
      cancel(params: CallParams<EscrowArgs['obj']['cancel(byte[32])void'] | EscrowArgs['tuple']['cancel(byte[32])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.cancel(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToToken(pay,uint64)void method call against the Escrow contract
       */
      optInToToken(params: CallParams<EscrowArgs['obj']['optInToToken(pay,uint64)void'] | EscrowArgs['tuple']['optInToToken(pay,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToToken(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a adminWithdrawable(uint64)uint64 method call against the Escrow contract
       */
      adminWithdrawable(params: CallParams<EscrowArgs['obj']['adminWithdrawable(uint64)uint64'] | EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.adminWithdrawable(params)))
        resultMappers.push((v) => client.decodeReturnValue('adminWithdrawable(uint64)uint64', v))
        return this
      },
      /**
       * Add a adminWithdraw(uint64)uint64 method call against the Escrow contract
       */
      adminWithdraw(params: CallParams<EscrowArgs['obj']['adminWithdraw(uint64)uint64'] | EscrowArgs['tuple']['adminWithdraw(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.adminWithdraw(params)))
        resultMappers.push((v) => client.decodeReturnValue('adminWithdraw(uint64)uint64', v))
        return this
      },
      /**
       * Add a sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] method call against the Escrow contract
       */
      sendOnlineKeyRegistration(params: CallParams<EscrowArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | EscrowArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sendOnlineKeyRegistration(params)))
        resultMappers.push((v) => client.decodeReturnValue('sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]', v))
        return this
      },
      /**
       * Add a clear state call to the Escrow contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EscrowComposer
  }
}
export type EscrowComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create(txn,pay,uint64,byte[32],address)void ABI method.
   *
   * Creates the escrow. The deposit tx funds the escrow and creates HTLC to release the funds with password any time (withdraw method). After the time anyone can call cancel method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  create(params?: CallParams<EscrowArgs['obj']['create(txn,pay,uint64,byte[32],address)void'] | EscrowArgs['tuple']['create(txn,pay,uint64,byte[32],address)void']>): EscrowComposer<[...TReturns, EscrowReturns['create(txn,pay,uint64,byte[32],address)void'] | undefined]>

  /**
   * Calls the makeHash(byte[])byte[] ABI method.
   *
   * Return hash of the secret. Readonly method using the simulate method is for free.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  makeHash(params?: CallParams<EscrowArgs['obj']['makeHash(byte[])byte[]'] | EscrowArgs['tuple']['makeHash(byte[])byte[]']>): EscrowComposer<[...TReturns, EscrowReturns['makeHash(byte[])byte[]'] | undefined]>

  /**
   * Calls the getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32]) ABI method.
   *
   * EscrowInstance by secret
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEscrow(params?: CallParams<EscrowArgs['obj']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | EscrowArgs['tuple']['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])']>): EscrowComposer<[...TReturns, EscrowReturns['getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,byte[32])'] | undefined]>

  /**
   * Calls the getMBRDepositAmount()uint64 ABI method.
   *
   * Returns the amount to be deposited
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMbrDepositAmount(params?: CallParams<EscrowArgs['obj']['getMBRDepositAmount()uint64'] | EscrowArgs['tuple']['getMBRDepositAmount()uint64']>): EscrowComposer<[...TReturns, EscrowReturns['getMBRDepositAmount()uint64'] | undefined]>

  /**
   * Calls the latestTimestamp()uint64 ABI method.
   *
   * Get current time
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  latestTimestamp(params?: CallParams<EscrowArgs['obj']['latestTimestamp()uint64'] | EscrowArgs['tuple']['latestTimestamp()uint64']>): EscrowComposer<[...TReturns, EscrowReturns['latestTimestamp()uint64'] | undefined]>

  /**
   * Calls the withdraw(byte[32],byte[])void ABI method.
   *
   * Withdraw from escrow with known password
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<EscrowArgs['obj']['withdraw(byte[32],byte[])void'] | EscrowArgs['tuple']['withdraw(byte[32],byte[])void']>): EscrowComposer<[...TReturns, EscrowReturns['withdraw(byte[32],byte[])void'] | undefined]>

  /**
   * Calls the cancel(byte[32])void ABI method.
   *
   * After the time has passed, anyone can call this method to return funds to the original sender of the escrow account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancel(params?: CallParams<EscrowArgs['obj']['cancel(byte[32])void'] | EscrowArgs['tuple']['cancel(byte[32])void']>): EscrowComposer<[...TReturns, EscrowReturns['cancel(byte[32])void'] | undefined]>

  /**
   * Calls the optInToToken(pay,uint64)void ABI method.
   *
   * Anyone can optin this contract to his ASA if he deposits MBR
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToToken(params?: CallParams<EscrowArgs['obj']['optInToToken(pay,uint64)void'] | EscrowArgs['tuple']['optInToToken(pay,uint64)void']>): EscrowComposer<[...TReturns, EscrowReturns['optInToToken(pay,uint64)void'] | undefined]>

  /**
   * Calls the adminWithdrawable(uint64)uint64 ABI method.
   *
   * Shows the current withdrawable amount for the admin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adminWithdrawable(params?: CallParams<EscrowArgs['obj']['adminWithdrawable(uint64)uint64'] | EscrowArgs['tuple']['adminWithdrawable(uint64)uint64']>): EscrowComposer<[...TReturns, EscrowReturns['adminWithdrawable(uint64)uint64'] | undefined]>

  /**
   * Calls the adminWithdraw(uint64)uint64 ABI method.
   *
   * Method to exctract excess assets from smart contract address by the admin
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adminWithdraw(params?: CallParams<EscrowArgs['obj']['adminWithdraw(uint64)uint64'] | EscrowArgs['tuple']['adminWithdraw(uint64)uint64']>): EscrowComposer<[...TReturns, EscrowReturns['adminWithdraw(uint64)uint64'] | undefined]>

  /**
   * Calls the sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[] ABI method.
   *
   * Creator can perfom key registration for this escrow contract, so that he can receive staking rewards
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendOnlineKeyRegistration(params?: CallParams<EscrowArgs['obj']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | EscrowArgs['tuple']['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]']>): EscrowComposer<[...TReturns, EscrowReturns['sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Escrow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EscrowComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EscrowComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EscrowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EscrowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EscrowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EscrowComposerResults<TReturns>>
}
export type EscrowComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

