{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/Escrow/projects/Escrow/smart_contracts/escrow/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AA0BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;AAAA;;AAiLG;;AAAA;AAAA;AAAA;;AAAA;AAjLH;;;AAAA;AAiLG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AA7JH;;;AAAA;AA6JG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AArIH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAqIG;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAnHH;;;AAmHG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AA9FH;;;AAAA;;;AA8FG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAzEH;;;AAyEG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA9DH;;;AA8DG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAjBH;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAiBG;;;AAAA;;AAjBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAiBE;;;;;;;AAEwB;AACD;;AAhBoD;AAAA;;AAAA;AAAA;AAkBzC;AAAA;;AAAzB;AAAP;AACe;;AAAA;;AAAA;AAAyB;AAApC;AAAJ;;;AACoB;;AAAA;;AAAoB;;AAA/B;AAAP;AACkB;;AAAA;;AAAe;;AAA1B;AAAP;AACA;;AAAoB;;AAApB;;AACiB;AAAjB;;AAEE;;AAAoC;AAApC;AAAJ;;;AACoB;;AAAA;;AAAyB;;AAApC;AAAP;AACA;;AAAoB;;AAApB;;AACA;;AAAqB;;AAArB;;AACiB;AAAjB;;AAEF;;AAAA;AACA;;AAAA;AAEiB;;AAAA;AAAA;AAAA;;AACU;AAAvB;;AA/BqD;AAAA;AAAA;AAAA;AAAA;;AAgC1B;AAAA;;AAA/B;;;AAC4C;;AAAA;AAAA;AAAM;AAAhD;;AAE6C;;AAAA;;AAAA;AAAA;;AAAA;AAAZ;AAAnC;;AAAA;AAAA;AAG2B;;AACO;;AAAnB;AACkB;;AAAP;;AAAA;AAAZ;AAGJ;;AAAA;AANK;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AASf;;AAAA;AAAA;;AAQF;;;AAES;;AAAA;AAAP;AASF;;;AArE2E;AAAA;;AAAA;AAuEzC;AAAA;AAAhC;AAUc;;AAAd;AASF;;;AA1F2E;AAAA;;AAAA;AA4FzC;AAAA;AAAA;;AAAhC;AACO;;AAAA;AAAA;;AAAA;AAAP;AAEwC;AAAA;AAAA;AAE/B;;AAAoC;;AAAX;AAAW;AAA3C;AADF;AAK2B;;AAAwB;;AAAR;;AAAQ;AAAsB;;AAAP;;AAAO;AAAzE;;;AAGyB;;;AAO3B;;;AA/G2E;AAAA;;AAAA;AAiHzC;AAAA;AAAA;;AAAhC;AACwC;AAAA;AAAA;AACf;AAAX;AAAW;AAAgB;;AAAlC;AAAP;AAEkB;AAAA;;;AAAwB;;AAAR;;AAAQ;AAAsB;;AAAP;;AAAO;AAAhE;;;AAGyB;;;AAS3B;;;AAGe;;AAAA;;AAAoB;;AAA/B;AADF;AAIkB;;AAAA;;AAAW;;;;AAAtB;AAAP;AACc;;AAAkD;;AAAA;AAAzD;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AACA;AAI0B;;;;AADT;;;;;AAHjB;;;AAKS;;;AALT;;AAgBF;;;AAEmB;;AAAA;AACjB;;AAAA;;;AAEW;;AAA0B;;AAAA;AAC1B;;AAA0B;;AAAA;AADjC;AA1JqD;AAAA;;AAAA;AA4J1B;AAAA;AAAM;AAFjC;AADF;AAMqC;;AAA9B;;AAAA;;AAAA;AA/JgD;AAAA;;AAAA;AA+JsC;AAAA;AAAM;AAA5F;AAAP;AAUJ;;;AAEmB;;AAAA;AACjB;;AAAA;;;AAEW;;AAA0B;;AAAA;AAC1B;;AAA0B;;AAAA;AADjC;AA9KqD;AAAA;;AAAA;AAgL1B;AAAA;AAAM;AAFjC;AADF;AAMqC;;AAA9B;;AAAA;;AAAA;AAnLgD;AAAA;;AAAA;AAmLsC;AAAA;AAAM;AAA5F;AAAP;AAOJ;;;AAC6B;AACV;;AAAA;AA5LwC;AAAA;AAAA;AAAA;AA8L1B;AAAA;;AAA/B;;;AAC4C;;AAAA;AAAA;AAAM;AAAhD;;AAE6C;;AAAA;;AAAA;AAAZ;AAAnC;;AAAA;AAAA;AAEA;;AAAA;;;AACE;;;;;;;;;AAAA;;;AAGS;;;AAHT;;AAQA;;;;;;;;;;;;;AAAA;;;AAGS;;;AAHT;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 4 8"
    },
    "7": {
      "op": "bytecblock \"d\" 0x151f7c75 \"e\""
    },
    "18": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "20": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "23": {
      "op": "pushbytess 0x26bf1370 0x362d47d7 0xd9b663f3 0x64ccd930 0x11f927d0 0xa8c7fb20 0x8ab1c160 0x64d2d782 0xc81e228d // method \"create(txn,uint64,byte[32])void\", method \"makeHash(byte[])byte[]\", method \"getEscrow(byte[32])(uint64,uint64,uint64,uint64,address,byte[32])\", method \"latestTimestamp()uint64\", method \"withdraw(byte[32],byte[])void\", method \"cancel(byte[32])void\", method \"optInToASA(pay,uint64)void\", method \"adminWithdrawable(uint64)uint64\", method \"adminWithdraw(uint64)uint64\"",
      "defined_out": [
        "Method(adminWithdraw(uint64)uint64)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(cancel(byte[32])void)",
        "Method(create(txn,uint64,byte[32])void)",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,address,byte[32]))",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[])byte[])",
        "Method(optInToASA(pay,uint64)void)",
        "Method(withdraw(byte[32],byte[])void)"
      ],
      "stack_out": [
        "Method(create(txn,uint64,byte[32])void)",
        "Method(makeHash(byte[])byte[])",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,address,byte[32]))",
        "Method(latestTimestamp()uint64)",
        "Method(withdraw(byte[32],byte[])void)",
        "Method(cancel(byte[32])void)",
        "Method(optInToASA(pay,uint64)void)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(adminWithdraw(uint64)uint64)"
      ]
    },
    "70": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(adminWithdraw(uint64)uint64)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(cancel(byte[32])void)",
        "Method(create(txn,uint64,byte[32])void)",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,address,byte[32]))",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[])byte[])",
        "Method(optInToASA(pay,uint64)void)",
        "Method(withdraw(byte[32],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(txn,uint64,byte[32])void)",
        "Method(makeHash(byte[])byte[])",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,address,byte[32]))",
        "Method(latestTimestamp()uint64)",
        "Method(withdraw(byte[32],byte[])void)",
        "Method(cancel(byte[32])void)",
        "Method(optInToASA(pay,uint64)void)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(adminWithdraw(uint64)uint64)",
        "tmp%2#0"
      ]
    },
    "73": {
      "op": "match main_create_route@3 main_makeHash_route@4 main_getEscrow_route@5 main_latestTimestamp_route@6 main_withdraw_route@7 main_cancel_route@8 main_optInToASA_route@9 main_adminWithdrawable_route@10 main_adminWithdraw_route@11",
      "stack_out": []
    },
    "93": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "94": {
      "op": "return",
      "stack_out": []
    },
    "95": {
      "block": "main_adminWithdraw_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "97": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "98": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "99": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "101": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "102": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "105": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "106": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdraw",
      "op": "callsub adminWithdraw",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "109": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "110": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "113": {
      "op": "log",
      "stack_out": []
    },
    "114": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "115": {
      "op": "return",
      "stack_out": []
    },
    "116": {
      "block": "main_adminWithdrawable_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "118": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "119": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "120": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "122": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "123": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "126": {
      "op": "btoi",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "127": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdrawable",
      "op": "callsub adminWithdrawable",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "130": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "131": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "132": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "133": {
      "op": "concat",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "134": {
      "op": "log",
      "stack_out": []
    },
    "135": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "136": {
      "op": "return",
      "stack_out": []
    },
    "137": {
      "block": "main_optInToASA_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "139": {
      "op": "!",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "140": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "141": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "143": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "144": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "146": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0",
        "1"
      ]
    },
    "147": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "148": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "149": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%0#0"
      ]
    },
    "151": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "152": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "153": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "154": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "157": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.optInToASA",
      "op": "callsub optInToASA",
      "stack_out": []
    },
    "160": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "block": "main_cancel_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "165": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "166": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "168": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "169": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "172": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.cancel",
      "op": "callsub cancel",
      "stack_out": []
    },
    "175": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "176": {
      "op": "return",
      "stack_out": []
    },
    "177": {
      "block": "main_withdraw_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "180": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "181": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "184": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "187": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%2#0",
        "tmp%30#0"
      ]
    },
    "190": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "193": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "194": {
      "op": "return",
      "stack_out": []
    },
    "195": {
      "block": "main_latestTimestamp_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "197": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "198": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "199": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "201": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "202": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "205": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "206": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "207": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "208": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "209": {
      "op": "log",
      "stack_out": []
    },
    "210": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "211": {
      "op": "return",
      "stack_out": []
    },
    "212": {
      "block": "main_getEscrow_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "214": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "215": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "216": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "218": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "219": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "222": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.getEscrow",
      "op": "callsub getEscrow",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "225": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "0x151f7c75"
      ]
    },
    "226": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%19#0"
      ]
    },
    "227": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "228": {
      "op": "log",
      "stack_out": []
    },
    "229": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "230": {
      "op": "return",
      "stack_out": []
    },
    "231": {
      "block": "main_makeHash_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "233": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "234": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "235": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "237": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "238": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "241": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.makeHash",
      "op": "callsub makeHash",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "244": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "245": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "246": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "247": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "250": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "251": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "252": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "253": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "254": {
      "op": "concat",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "255": {
      "op": "log",
      "stack_out": []
    },
    "256": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "257": {
      "op": "return",
      "stack_out": []
    },
    "258": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "260": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "261": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "264": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "265": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "267": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "1"
      ]
    },
    "268": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "269": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "272": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ]
    },
    "273": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "276": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.create",
      "op": "callsub create",
      "stack_out": []
    },
    "279": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "280": {
      "op": "return",
      "stack_out": []
    },
    "281": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "283": {
      "op": "bnz main_after_if_else@18",
      "stack_out": []
    },
    "286": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "288": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "289": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "290": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "291": {
      "op": "return",
      "stack_out": []
    },
    "292": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.create",
      "params": {
        "txnDeposit#0": "uint64",
        "rescueDelay#0": "uint64",
        "secretHash#0": "bytes"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "295": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "296": {
      "op": "dup",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0"
      ]
    },
    "297": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0"
      ]
    },
    "299": {
      "op": "intc_1 // 0"
    },
    "300": {
      "op": "dupn 2"
    },
    "302": {
      "op": "bytec_2 // \"e\""
    },
    "303": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"e\"",
        "amount#0",
        "depositIsValid#0",
        "secretHash#0 (copy)",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0"
      ]
    },
    "306": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "307": {
      "op": "box_len",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "308": {
      "op": "bury 1",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "310": {
      "op": "!",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%1#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "311": {
      "error": "Escrow with the same id already exists",
      "op": "assert // Escrow with the same id already exists",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0"
      ]
    },
    "312": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tokenId#0",
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "314": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "316": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "317": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0",
        "1"
      ]
    },
    "318": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "319": {
      "op": "bz create_after_if_else@2",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "322": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "324": {
      "op": "gtxns Receiver",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0"
      ]
    },
    "326": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "328": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ]
    },
    "329": {
      "error": "Receiver must be the escrow app",
      "op": "assert // Receiver must be the escrow app",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "330": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "332": {
      "op": "gtxns Sender",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ]
    },
    "334": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "336": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ]
    },
    "337": {
      "error": "Sender of deposit must be the same as the sender of the app call",
      "op": "assert // Sender of deposit must be the same as the sender of the app call",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "338": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "340": {
      "op": "gtxns Amount",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0"
      ]
    },
    "342": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "344": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "depositIsValid#0"
      ]
    },
    "345": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "347": {
      "block": "create_after_if_else@2",
      "stack_in": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "op": "frame_dig 7",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "349": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0",
        "4"
      ]
    },
    "350": {
      "op": "==",
      "defined_out": [
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%11#0"
      ]
    },
    "351": {
      "op": "bz create_after_if_else@4",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "354": {
      "op": "frame_dig -3",
      "defined_out": [
        "tmp%2#0",
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "356": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%12#0"
      ]
    },
    "358": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "360": {
      "op": "==",
      "defined_out": [
        "tmp%14#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%14#0"
      ]
    },
    "361": {
      "error": "Receiver must be the escrow app",
      "op": "assert // Receiver must be the escrow app",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "362": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "364": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0"
      ]
    },
    "366": {
      "op": "frame_bury 4",
      "defined_out": [
        "amount#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "368": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "370": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "amount#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenId#0"
      ]
    },
    "372": {
      "op": "frame_bury 3",
      "defined_out": [
        "amount#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "374": {
      "op": "intc_0 // 1",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "depositIsValid#0"
      ]
    },
    "375": {
      "op": "frame_bury 5",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "377": {
      "block": "create_after_if_else@4",
      "stack_in": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0"
      ]
    },
    "379": {
      "error": "Deposit should be positive number",
      "op": "assert // Deposit should be positive number",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "380": {
      "op": "frame_dig 5",
      "defined_out": [
        "amount#0",
        "depositIsValid#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "depositIsValid#0"
      ]
    },
    "382": {
      "error": "Deposit must be asset transfer or payment",
      "op": "assert // Deposit must be asset transfer or payment",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "383": {
      "op": "frame_dig 3",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenId#0"
      ]
    },
    "385": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenIdN#0"
      ]
    },
    "386": {
      "op": "dup",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenIdN#0",
        "tokenIdN#0"
      ]
    },
    "387": {
      "op": "frame_bury 1",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenIdN#0"
      ]
    },
    "389": {
      "op": "intc_1 // 0",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "prevDeposits#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenIdN#0",
        "prevDeposits#0"
      ]
    },
    "390": {
      "op": "frame_bury 2",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "prevDeposits#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenIdN#0"
      ]
    },
    "392": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "amount#0",
        "depositIsValid#0",
        "prevDeposits#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tokenIdN#0",
        "\"d\""
      ]
    },
    "393": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "\"d\"",
        "tokenIdN#0"
      ]
    },
    "394": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%16#0"
      ]
    },
    "395": {
      "op": "dup",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%16#0",
        "tmp%16#0"
      ]
    },
    "396": {
      "op": "frame_bury 0",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%16#0"
      ]
    },
    "398": {
      "op": "box_len",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "399": {
      "op": "bury 1",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "401": {
      "op": "bz create_after_if_else@6",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "404": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%16#0"
      ]
    },
    "406": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "407": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%2#0"
      ]
    },
    "408": {
      "op": "btoi",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "prevDeposits#0"
      ]
    },
    "409": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "411": {
      "block": "create_after_if_else@6",
      "stack_in": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "prevDeposits#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "prevDeposits#0"
      ]
    },
    "413": {
      "op": "frame_dig 4",
      "defined_out": [
        "amount#0",
        "prevDeposits#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "prevDeposits#0",
        "amount#0"
      ]
    },
    "415": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "amount#0 (copy)",
        "prevDeposits#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "prevDeposits#0",
        "amount#0 (copy)",
        "amount#0 (copy)"
      ]
    },
    "416": {
      "op": "cover 2",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "prevDeposits#0",
        "amount#0 (copy)"
      ]
    },
    "418": {
      "op": "+",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "to_encode%0#0"
      ]
    },
    "419": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "val_as_bytes%1#0"
      ]
    },
    "420": {
      "op": "frame_dig 0",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "val_as_bytes%1#0",
        "tmp%16#0"
      ]
    },
    "422": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%16#0",
        "val_as_bytes%1#0"
      ]
    },
    "423": {
      "op": "box_put",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0"
      ]
    },
    "424": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%19#0"
      ]
    },
    "426": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%19#0",
        "to_encode%1#0"
      ]
    },
    "428": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%19#0",
        "val_as_bytes%2#0"
      ]
    },
    "429": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "tmp%20#0"
      ]
    },
    "431": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "rescueDelay#0 (copy)",
        "tmp%16#0",
        "tmp%19#0",
        "tmp%20#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "tmp%20#0",
        "rescueDelay#0 (copy)"
      ]
    },
    "433": {
      "op": "+",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "to_encode%2#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "to_encode%2#0"
      ]
    },
    "434": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "amount#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "435": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "amount#0"
      ]
    },
    "437": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%5#0"
      ]
    },
    "438": {
      "op": "cover 2",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "val_as_bytes%5#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "440": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%2#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "441": {
      "op": "frame_dig 1",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%2#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "tokenIdN#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0",
        "tokenIdN#0"
      ]
    },
    "443": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%3#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "tokenIdN#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%5#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%4#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tmp%19#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%19#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "446": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "encoded_tuple_buffer%4#0",
        "tmp%19#0"
      ]
    },
    "447": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%5#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "448": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%5#0",
        "prevDeposits#0",
        "secretHash#0 (copy)",
        "tmp%16#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "encoded_tuple_buffer%5#0",
        "secretHash#0 (copy)"
      ]
    },
    "450": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "escrow#0",
        "prevDeposits#0",
        "tmp%16#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "escrow#0"
      ]
    },
    "451": {
      "op": "frame_dig 6",
      "defined_out": [
        "amount#0",
        "escrow#0",
        "prevDeposits#0",
        "tmp%0#0",
        "tmp%16#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "escrow#0",
        "tmp%0#0"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "454": {
      "op": "box_put",
      "stack_out": [
        "tmp%16#0",
        "tokenIdN#0",
        "prevDeposits#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "455": {
      "retsub": true,
      "op": "retsub"
    },
    "456": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.makeHash",
      "params": {
        "secret#0": "bytes"
      },
      "block": "makeHash",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "459": {
      "op": "frame_dig -1",
      "defined_out": [
        "secret#0 (copy)"
      ],
      "stack_out": [
        "secret#0 (copy)"
      ]
    },
    "461": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "462": {
      "retsub": true,
      "op": "retsub"
    },
    "463": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.getEscrow",
      "params": {
        "secretHash#0": "bytes"
      },
      "block": "getEscrow",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "466": {
      "op": "bytec_2 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "467": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "469": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "470": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "471": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "472": {
      "retsub": true,
      "op": "retsub"
    },
    "473": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.latestTimestamp",
      "params": {},
      "block": "latestTimestamp",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "retsub": true,
      "op": "retsub"
    },
    "476": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.withdraw",
      "params": {
        "secretHash#0": "bytes",
        "secret#0": "bytes"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "479": {
      "op": "bytec_2 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "480": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "482": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "483": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "484": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "485": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "487": {
      "error": "The escrow does not exists",
      "op": "assert // The escrow does not exists",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "488": {
      "op": "frame_dig -1",
      "defined_out": [
        "secret#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "secret#0 (copy)"
      ]
    },
    "490": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "491": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "secretHash#0 (copy)"
      ]
    },
    "493": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "494": {
      "error": "The password is not correct",
      "op": "assert // The password is not correct",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "495": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "496": {
      "op": "box_get",
      "defined_out": [
        "escrow#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0"
      ]
    },
    "497": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "498": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0"
      ]
    },
    "500": {
      "op": "dig 1",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0",
        "escrow#0 (copy)"
      ]
    },
    "502": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0",
        "escrow#0 (copy)",
        "8"
      ]
    },
    "503": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "504": {
      "op": "<",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%7#0"
      ]
    },
    "505": {
      "error": "Escrow can be redeemed with password up to the rescue time",
      "op": "assert // Escrow can be redeemed with password up to the rescue time",
      "stack_out": [
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "506": {
      "op": "txn Sender",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%8#0"
      ]
    },
    "508": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%8#0",
        "escrow#0 (copy)"
      ]
    },
    "510": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%8#0",
        "escrow#0 (copy)",
        "16"
      ]
    },
    "512": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "513": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%10#0",
        "escrow#0"
      ]
    },
    "515": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "escrow#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%10#0",
        "escrow#0",
        "24"
      ]
    },
    "517": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "518": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "521": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "522": {
      "op": "pop",
      "stack_out": []
    },
    "523": {
      "retsub": true,
      "op": "retsub"
    },
    "524": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.cancel",
      "params": {
        "secretHash#0": "bytes"
      },
      "block": "cancel",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "527": {
      "op": "bytec_2 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "528": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "530": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "531": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "532": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "533": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "535": {
      "error": "The escrow does not exists",
      "op": "assert // The escrow does not exists",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "536": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "537": {
      "op": "box_get",
      "defined_out": [
        "escrow#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0"
      ]
    },
    "538": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "539": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "540": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)",
        "8"
      ]
    },
    "541": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%3#0"
      ]
    },
    "542": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "544": {
      "op": "<",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%5#0"
      ]
    },
    "545": {
      "error": "The escrow cannot be canceled yet",
      "op": "assert // The escrow cannot be canceled yet",
      "stack_out": [
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "546": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "547": {
      "error": "Index access is out of bounds",
      "op": "extract 32 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%6#0"
      ]
    },
    "550": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%6#0",
        "escrow#0 (copy)"
      ]
    },
    "552": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%6#0",
        "escrow#0 (copy)",
        "16"
      ]
    },
    "554": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "555": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0",
        "escrow#0"
      ]
    },
    "557": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "escrow#0",
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0",
        "escrow#0",
        "24"
      ]
    },
    "559": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%0#0",
        "tmp%10#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "560": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "563": {
      "op": "box_del",
      "defined_out": [
        "{box_del}"
      ],
      "stack_out": [
        "{box_del}"
      ]
    },
    "564": {
      "op": "pop",
      "stack_out": []
    },
    "565": {
      "retsub": true,
      "op": "retsub"
    },
    "566": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.optInToASA",
      "params": {
        "txnDeposit#0": "uint64",
        "assetId#0": "bytes"
      },
      "block": "optInToASA",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "569": {
      "op": "frame_dig -2",
      "defined_out": [
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "txnDeposit#0 (copy)"
      ]
    },
    "571": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "573": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "575": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "576": {
      "error": "Receiver of the optin fee must be the current smart contract",
      "op": "assert // Receiver of the optin fee must be the current smart contract",
      "stack_out": []
    },
    "577": {
      "op": "frame_dig -2",
      "stack_out": [
        "txnDeposit#0 (copy)"
      ]
    },
    "579": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "581": {
      "op": "pushint 100000 // 100000",
      "defined_out": [
        "100000",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "100000"
      ]
    },
    "585": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "586": {
      "error": "Opt in fee to cover MBR",
      "op": "assert // Opt in fee to cover MBR",
      "stack_out": []
    },
    "587": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "589": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "assetId#0 (copy)"
      ]
    },
    "591": {
      "op": "btoi",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "592": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "tmp%5#0"
      ]
    },
    "593": {
      "op": "dig 1",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%5#0",
        "tmp%6#0 (copy)"
      ]
    },
    "595": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "597": {
      "op": "bury 1",
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "599": {
      "op": "!",
      "defined_out": [
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "600": {
      "error": "Asset is already opted in",
      "op": "assert // Asset is already opted in",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "601": {
      "op": "itxn_begin"
    },
    "602": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "604": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "606": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "607": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "609": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "611": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "612": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "614": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "615": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "617": {
      "op": "itxn_submit"
    },
    "618": {
      "retsub": true,
      "op": "retsub"
    },
    "619": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdrawable",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "adminWithdrawable",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "622": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "assetId#0 (copy)"
      ]
    },
    "624": {
      "op": "itob",
      "defined_out": [
        "assetIdN#0"
      ],
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "625": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetIdN#0",
        "assetId#0 (copy)"
      ]
    },
    "627": {
      "op": "bnz adminWithdrawable_else_body@2",
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "630": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%1#0"
      ]
    },
    "632": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "assetIdN#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "634": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0"
      ]
    },
    "635": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "tmp%2#0"
      ]
    },
    "637": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "assetIdN#0",
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "639": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "640": {
      "op": "-",
      "defined_out": [
        "assetIdN#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%3#0"
      ]
    },
    "641": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%3#0",
        "\"d\""
      ]
    },
    "642": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "645": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "646": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "648": {
      "op": "-",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "649": {
      "retsub": true,
      "op": "retsub"
    },
    "650": {
      "block": "adminWithdrawable_else_body@2",
      "stack_in": [
        "assetIdN#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%7#0"
      ]
    },
    "652": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%7#0",
        "assetId#0 (copy)"
      ]
    },
    "654": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "656": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetIdN#0",
        "value%2#0"
      ]
    },
    "657": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "\"d\""
      ]
    },
    "658": {
      "op": "uncover 2",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "660": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%8#0"
      ]
    },
    "661": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "662": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0"
      ]
    },
    "663": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "664": {
      "op": "-",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "665": {
      "retsub": true,
      "op": "retsub"
    },
    "666": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdraw",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "adminWithdraw",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "669": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "assetId#0 (copy)"
      ]
    },
    "671": {
      "op": "itob",
      "defined_out": [
        "assetIdN#0"
      ],
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "672": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetIdN#0",
        "assetId#0 (copy)"
      ]
    },
    "674": {
      "op": "bnz adminWithdraw_else_body@2",
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "677": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%1#0"
      ]
    },
    "679": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "assetIdN#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "681": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0"
      ]
    },
    "682": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "tmp%2#0"
      ]
    },
    "684": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "assetIdN#0",
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "686": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "687": {
      "op": "-",
      "defined_out": [
        "assetIdN#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%3#0"
      ]
    },
    "688": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%3#0",
        "\"d\""
      ]
    },
    "689": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "691": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "692": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "693": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "694": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "695": {
      "op": "-",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "696": {
      "retsub": true,
      "op": "retsub"
    },
    "697": {
      "block": "adminWithdraw_else_body@2",
      "stack_in": [
        "assetIdN#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%7#0"
      ]
    },
    "699": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%7#0",
        "assetId#0 (copy)"
      ]
    },
    "701": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "703": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetIdN#0",
        "value%2#0"
      ]
    },
    "704": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "\"d\""
      ]
    },
    "705": {
      "op": "uncover 2",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "707": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%8#0"
      ]
    },
    "708": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "709": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0"
      ]
    },
    "710": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "711": {
      "op": "-",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "712": {
      "retsub": true,
      "op": "retsub"
    },
    "713": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "params": {
        "receiver#0": "bytes",
        "assetId#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "_send",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "716": {
      "op": "intc_1 // 0"
    },
    "717": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)",
        "prevDeposits#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "assetId#0 (copy)"
      ]
    },
    "719": {
      "op": "itob",
      "defined_out": [
        "prevDeposits#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tokenIdN#0"
      ]
    },
    "720": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "prevDeposits#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tokenIdN#0",
        "\"d\""
      ]
    },
    "721": {
      "op": "swap",
      "stack_out": [
        "prevDeposits#0",
        "\"d\"",
        "tokenIdN#0"
      ]
    },
    "722": {
      "op": "concat",
      "defined_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "723": {
      "op": "dup",
      "defined_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "724": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "725": {
      "op": "bury 1",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "727": {
      "op": "bz _send_after_if_else@2",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "730": {
      "op": "frame_dig 1",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "732": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "733": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "734": {
      "op": "btoi",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "prevDeposits#0"
      ]
    },
    "735": {
      "op": "frame_bury 0",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "737": {
      "block": "_send_after_if_else@2",
      "stack_in": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "prevDeposits#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "prevDeposits#0"
      ]
    },
    "739": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "prevDeposits#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "prevDeposits#0",
        "amount#0 (copy)"
      ]
    },
    "741": {
      "op": "-",
      "defined_out": [
        "prevDeposits#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "742": {
      "op": "itob",
      "defined_out": [
        "prevDeposits#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "743": {
      "op": "frame_dig 1",
      "defined_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "val_as_bytes%1#0",
        "tmp%0#0"
      ]
    },
    "745": {
      "op": "swap",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "746": {
      "op": "box_put",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "747": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "assetId#0 (copy)"
      ]
    },
    "749": {
      "op": "bnz _send_else_body@5",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "752": {
      "op": "itxn_begin"
    },
    "753": {
      "op": "frame_dig -3",
      "defined_out": [
        "prevDeposits#0",
        "receiver#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "receiver#0 (copy)"
      ]
    },
    "755": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "757": {
      "op": "frame_dig -1",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "amount#0 (copy)"
      ]
    },
    "759": {
      "op": "itxn_field Amount",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "761": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "1"
      ]
    },
    "762": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "764": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "0"
      ]
    },
    "765": {
      "op": "itxn_field Fee",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "767": {
      "op": "itxn_submit"
    },
    "768": {
      "retsub": true,
      "op": "retsub"
    },
    "769": {
      "block": "_send_else_body@5",
      "stack_in": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "op": "itxn_begin"
    },
    "770": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "assetId#0 (copy)"
      ]
    },
    "772": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "774": {
      "op": "frame_dig -3",
      "defined_out": [
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "receiver#0 (copy)"
      ]
    },
    "776": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "778": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "amount#0 (copy)"
      ]
    },
    "780": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "782": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "4"
      ]
    },
    "783": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "785": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "0"
      ]
    },
    "786": {
      "op": "itxn_field Fee",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "788": {
      "op": "itxn_submit"
    },
    "789": {
      "retsub": true,
      "op": "retsub"
    }
  }
}