{
  "version": 3,
  "sources": [
    "C:/Users/scholtz/source/repos/scholtz/Escrow/projects/Escrow/smart_contracts/escrow/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAoUG;;AAAA;AAAA;AAAA;;AAAA;AApUH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAoUG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAlTH;;;AAAA;AAkTG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AA7RH;;;AAAA;AA6RG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAnCA;;AAAA;AAAA;AAAA;;AAAA;AA1PH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AA0PG;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAvOH;;;AAAA;;;AAuOG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AA9MH;;;AA8MG;;;AAAA;;AAzCA;;AAAA;AAAA;AAAA;;AAAA;AArKH;;;AAAA;;;AAqKG;;;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAlHH;;;AAkHG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AAvGH;;;AAuGG;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApFA;;AAAA;AAAA;AAAA;;AAAA;AAnBH;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAmBG;;;AAAA;;AAnBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAmBE;;;;;;;;AAUwB;AACD;;AAGb;;AADM;AACN;AAAD;AAAP;AAC0B;;AAA0B;;AAAA;AAC/B;;AAAA;;AAAoB;;AAAlC;AAAP;AA/ByE;AAAA;;AAAA;AAAA;AAgCzC;AAAA;;AAAzB;AAAP;AACe;;AAAA;;AAAA;AAAyB;AAApC;AAAJ;;;AACoB;;AAAA;;AAAoB;;AAA/B;AAAP;AACkB;;AAAA;;AAAe;;AAA1B;AAAP;AACA;;AAAoB;;AAApB;;AACiB;AAAjB;;AAEE;;AAAoC;;AAApC;AAAJ;;;AACoB;;AAAA;;AAAyB;;AAApC;AAAP;AACA;;AAAoB;;AAApB;;AACA;;AAAqB;;AAArB;;AACiB;AAAjB;;AAEF;;AAAA;AACA;;AAAA;AAEI;;AAAsB;AAAtB;AAAJ;;;AACS;;AAAA;;AAAA;AAAP;AAGF;;AAAA;;;AACmB;;AAAA;AACU;AAAvB;;AAlDmD;AAAA;AAAA;AAAA;AAAA;;AAmDxB;AAAA;;AAA/B;;;AAC4C;;AAAA;AAAA;AAAM;AAAhD;;AAE6C;;AAAA;;AAAA;AAAsC;;AAAA;;AAAtC;AAAZ;AAAnC;;AAAA;AAAA;AAkByB;;AAEO;;AAAnB;AACkB;;AAAP;;AAAA;AAAZ;AACH;;AAAA;AAED;;AAAA;AAC6B;;AAAA;;AAA1B;AAAA;AARE;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAaf;;AAAA;AAAA;AAEwB;;AAA0B;;AAAA;AAC3C;;AAAA;AAAA;AAAP;;AA/BmB;;AAAA;AACU;AAAvB;;AAzDmD;AAAA;AAAA;AAAA;AAAA;;AA0DxB;AAAA;;AAA/B;;;AAC4C;;AAAA;AAAA;AAAM;AAAhD;;AAE6C;;AAAA;;AAAA;AAAZ;AAAnC;;AAAA;AAAA;AA7DuD;;AAiExB;AAAA;;AAA/B;;;AAjEuD;;AAkEX;AAAA;;AAAA;AAEiC;;AAAA;;AAA1C;AApEoB;;AAoEvD;AAAA;;;;AA2BJ;;;AAES;;AAAA;AAAP;AASF;;;AA9G2E;AAAA;;AAAA;AAgHzC;AAAA;AAAhC;AAa6B;;AAAnB;AACsB;;AACN;;AAA0B;;AAAA;AAClC;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAJL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIK;AALJ;AAKI;AAhIuD;;AA4IzE;AAAA;AACwB;;AAA0B;;AAAA;AA7IuB;;AA8IrD;;AACb;AAAA;AAAP;AASc;;AAAd;AASF;;;;;;AAjK2E;AAAA;;AAAA;AAmKzC;AAAA;AAAA;;AAAhC;AACO;;AAAA;AAAA;;AAAA;AAAP;AAEwC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAE/B;;AAAoC;;AAAX;;AAAW;AAA3C;AADF;AAKS;AAAA;;;AAAsB;AAA7B;AADF;AAMyB;AAAA;;AAGL;;;AAAhB;AACW;AAAX;AAAJ;;;AAC2B;;AAAzB;;AAEiB;;AAAR;;AAAQ;AAAA;AAAA;;AAAnB;;;AACwB;;AAAA;;;AAAA;AAAA;;AAAlB;;AAAA;AAAJ;;;AAC0D;;AAAA;AAAP;AAAO;AAA0B;AAAV;AAAU;AAAxC;AAA1C;;AAAA;;AAAA;;AAAA;;;;AAEwD;;AAAA;AAAP;AAAO;AAAxD;;AAAA;;AAAA;;AAAA;;;AACqC;AAAU;AAA/C;;AAA2B;AAA3B;;AAAA;;;;AAIsD;;AAAA;AAAP;AAAO;AAAxD;;AAAA;;AAAA;;AAAA;;;AACkB;AAAA;;;AAA6B;AAAV;AAAU;AAApB;AAA3B;AAAA;;;;AAQJ;;;AA1M2E;AAAA;;AAAA;AA4MzC;AAAA;AAAA;;AAAhC;AACwC;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AACf;AAAX;;AAAW;AAAgB;;AAAlC;AAAP;AAGyB;AAAA;;AAGd;;AAAQ;AAAA;AAAnB;;;AACoB;;AAAA;AAAA;;;AAA8C;;AAAP;AAAO;AAA0B;;AAAV;AAAU;AAAxC;AAAlD;AAAA;;AAAA;;;;AAGkB;;AAAA;AAAA;;;AAA8C;;AAAP;AAAO;AAAhE;;AAAA;;AAAA;;AAAA;;;AAC+C;AAAV;AAAU;AAApB;AAA3B;AAAA;;;;AAUJ;;;AAnO2E;AAAA;;AAAA;AAqOzC;AAAA;AAAA;;AAAhC;AACwC;AAAA;AAAA;AAEpB;AAAX;;AAAW;AAAiB;;AAAnC;AADF;AAIuB;;AAAmB;AAAA;;;AAAnC;AAAP;AAEyB;AAAA;AAAA;AAAzB;;AAAA;;AAAA;;AAAA;AAAA;AACyB;AAAA;AAAA;AAA0B;AAAnD;;AAAA;;AAQF;;;AAGe;;AAAA;;AAAoB;;AAA/B;AADF;AAIY;;AAAA;AAAA;AAAZ;;;AAOoB;;AAAA;;AAAW;;;;AAAtB;AAAP;AACc;;AAAP;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAP;AAEA;AAI0B;;;;AADT;;;;;AAHjB;;;;AAKS;;;AALT;AAlQuD;AAAA;;AAAA;AA2QvB;AAAA;AAAA;;AAA3B;AAAP;AACkC;;;;;;;;;;AAAlC;;AASF;;;AAEmB;;AAAA;AACjB;;AAAA;;;AAEW;;AAA0B;;AAAA;AAC1B;;AAA0B;;AAAA;AADjC;AA1RqD;AAAA;;AAAA;AA4R1B;AAAA;AAAM;AAFjC;AADF;AAMqC;;AAA9B;;AAAA;;AAAA;AA/RgD;AAAA;;AAAA;AA+RsC;AAAA;AAAM;AAA5F;AAAP;AAWJ;;;AAEa;;AAAkB;;AAAtB;AAAP;AACiB;;AAAA;AACjB;;AAAA;;;AAEW;;AAA0B;;AAAA;AAC1B;;AAA0B;;AAAA;AADjC;AAhTqD;AAAA;;AAAA;AAkT1B;AAAA;AAAM;AAFjC;AADF;AAMqC;;AAA9B;;AAAA;;AAAA;AArTgD;AAAA;;AAAA;AAqTsC;AAAA;AAAM;AAA5F;AAAP;AAOJ;;;AAUgB;;AAAuB;;AAA9B;AAAP;AACmB;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAAA;;;AAWnB;AAKF;;;AAC6B;AACV;;AAAA;AAzVwC;AAAA;AAAA;AAAA;AA2V1B;AAAA;;AAA/B;;;AAC4C;;AAAA;AAAA;AAAM;AAAhD;;AAE6C;;AAAA;;AAAA;AAAZ;AAAnC;;AAAA;AAAA;AAEA;;AAAA;;;AACE;;;;;;;;;AAAA;;;AAGS;;;AAHT;;AAQA;;;;;;;;;;;;;AAAA;;;;AAGS;;;AAHT;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 24 32"
    },
    "7": {
      "op": "bytecblock \"d\" 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 \"e\" 0x640000000000000000 0x650000000000000000000000000000000000000000000000000000000000000000"
    },
    "95": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "97": {
      "op": "bz main_bare_routing@17",
      "stack_out": []
    },
    "100": {
      "op": "pushbytess 0xad274896 0x362d47d7 0x07f3c473 0xada1b3d7 0x64ccd930 0x11f927d0 0xa8c7fb20 0xef06b1f8 0xe394695d 0x64d2d782 0xc81e228d 0xc61d56f5 // method \"create(txn,pay,uint64,byte[32],address,address,byte[256])void\", method \"makeHash(byte[])byte[]\", method \"getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,address,byte[256],byte[32])\", method \"getMBRDepositAmount()uint64\", method \"latestTimestamp()uint64\", method \"withdraw(byte[32],byte[])void\", method \"cancel(byte[32])void\", method \"setTaker(byte[32],address)void\", method \"optInToToken(pay,uint64)void\", method \"adminWithdrawable(uint64)uint64\", method \"adminWithdraw(uint64)uint64\", method \"sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[]\"",
      "defined_out": [
        "Method(adminWithdraw(uint64)uint64)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(cancel(byte[32])void)",
        "Method(create(txn,pay,uint64,byte[32],address,address,byte[256])void)",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,address,byte[256],byte[32]))",
        "Method(getMBRDepositAmount()uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[])byte[])",
        "Method(optInToToken(pay,uint64)void)",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "Method(setTaker(byte[32],address)void)",
        "Method(withdraw(byte[32],byte[])void)"
      ],
      "stack_out": [
        "Method(create(txn,pay,uint64,byte[32],address,address,byte[256])void)",
        "Method(makeHash(byte[])byte[])",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,address,byte[256],byte[32]))",
        "Method(getMBRDepositAmount()uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(withdraw(byte[32],byte[])void)",
        "Method(cancel(byte[32])void)",
        "Method(setTaker(byte[32],address)void)",
        "Method(optInToToken(pay,uint64)void)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(adminWithdraw(uint64)uint64)",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])"
      ]
    },
    "162": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(adminWithdraw(uint64)uint64)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(cancel(byte[32])void)",
        "Method(create(txn,pay,uint64,byte[32],address,address,byte[256])void)",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,address,byte[256],byte[32]))",
        "Method(getMBRDepositAmount()uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(makeHash(byte[])byte[])",
        "Method(optInToToken(pay,uint64)void)",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "Method(setTaker(byte[32],address)void)",
        "Method(withdraw(byte[32],byte[])void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create(txn,pay,uint64,byte[32],address,address,byte[256])void)",
        "Method(makeHash(byte[])byte[])",
        "Method(getEscrow(byte[32])(uint64,uint64,uint64,uint64,uint64,address,address,address,byte[256],byte[32]))",
        "Method(getMBRDepositAmount()uint64)",
        "Method(latestTimestamp()uint64)",
        "Method(withdraw(byte[32],byte[])void)",
        "Method(cancel(byte[32])void)",
        "Method(setTaker(byte[32],address)void)",
        "Method(optInToToken(pay,uint64)void)",
        "Method(adminWithdrawable(uint64)uint64)",
        "Method(adminWithdraw(uint64)uint64)",
        "Method(sendOnlineKeyRegistration(byte[],byte[],byte[],uint64,uint64,uint64,uint64)byte[])",
        "tmp%2#0"
      ]
    },
    "165": {
      "op": "match main_create_route@3 main_makeHash_route@4 main_getEscrow_route@5 main_getMBRDepositAmount_route@6 main_latestTimestamp_route@7 main_withdraw_route@8 main_cancel_route@9 main_setTaker_route@10 main_optInToToken_route@11 main_adminWithdrawable_route@12 main_adminWithdraw_route@13 main_sendOnlineKeyRegistration_route@14",
      "stack_out": []
    },
    "191": {
      "block": "main_after_if_else@21",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "192": {
      "op": "return",
      "stack_out": []
    },
    "193": {
      "block": "main_sendOnlineKeyRegistration_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "195": {
      "op": "!",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "196": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "197": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "199": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "200": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "203": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "206": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%67#0",
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%68#0"
      ]
    },
    "209": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%67#0",
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0"
      ]
    },
    "212": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%70#0"
      ]
    },
    "215": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0"
      ]
    },
    "218": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "221": {
      "op": "btoi",
      "defined_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0"
      ]
    },
    "222": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "225": {
      "op": "btoi",
      "defined_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0"
      ]
    },
    "226": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "229": {
      "op": "btoi",
      "defined_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0",
        "tmp%74#0"
      ]
    },
    "230": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "reinterpret_bytes[8]%7#0",
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0",
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0",
        "tmp%74#0",
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "233": {
      "op": "btoi",
      "defined_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0",
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%67#0",
        "tmp%69#0",
        "tmp%71#0",
        "tmp%72#0",
        "tmp%73#0",
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "234": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.sendOnlineKeyRegistration",
      "op": "callsub sendOnlineKeyRegistration",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "237": {
      "op": "dup",
      "defined_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ],
      "stack_out": [
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "238": {
      "op": "len",
      "defined_out": [
        "length%1#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length%1#0"
      ]
    },
    "239": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "as_bytes%1#0"
      ]
    },
    "240": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%1#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "length_uint16%1#0"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "length_uint16%1#0",
        "to_encode%5#0"
      ]
    },
    "244": {
      "op": "concat",
      "defined_out": [
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0"
      ]
    },
    "245": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "0x151f7c75"
      ]
    },
    "246": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%1#0"
      ]
    },
    "247": {
      "op": "concat",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "248": {
      "op": "log",
      "stack_out": []
    },
    "249": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "250": {
      "op": "return",
      "stack_out": []
    },
    "251": {
      "block": "main_adminWithdraw_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "253": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "254": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "255": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "258": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "261": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "262": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdraw",
      "op": "callsub adminWithdraw",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "265": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "266": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "267": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "268": {
      "op": "concat",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "269": {
      "op": "log",
      "stack_out": []
    },
    "270": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "271": {
      "op": "return",
      "stack_out": []
    },
    "272": {
      "block": "main_adminWithdrawable_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "274": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "275": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "276": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "278": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "279": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "282": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "283": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdrawable",
      "op": "callsub adminWithdrawable",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "286": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "287": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "288": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "289": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "290": {
      "op": "log",
      "stack_out": []
    },
    "291": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "292": {
      "op": "return",
      "stack_out": []
    },
    "293": {
      "block": "main_optInToToken_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "295": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "296": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "297": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "299": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "300": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "302": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "1"
      ]
    },
    "303": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "304": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "305": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%1#0"
      ]
    },
    "307": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "308": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "309": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%2#0"
      ]
    },
    "310": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "gtxn_idx%2#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "313": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.optInToToken",
      "op": "callsub optInToToken",
      "stack_out": []
    },
    "316": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "317": {
      "op": "return",
      "stack_out": []
    },
    "318": {
      "block": "main_setTaker_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "320": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "321": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "322": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "324": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "325": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0"
      ]
    },
    "328": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%6#0",
        "reinterpret_bytes[32]%7#0"
      ]
    },
    "331": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.setTaker",
      "op": "callsub setTaker",
      "stack_out": []
    },
    "334": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "335": {
      "op": "return",
      "stack_out": []
    },
    "336": {
      "block": "main_cancel_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "338": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "339": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "340": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "342": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "343": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%5#0"
      ]
    },
    "346": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.cancel",
      "op": "callsub cancel",
      "stack_out": []
    },
    "349": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "350": {
      "op": "return",
      "stack_out": []
    },
    "351": {
      "block": "main_withdraw_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "353": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "354": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "355": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "357": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "358": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0"
      ]
    },
    "361": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%4#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%4#0",
        "tmp%36#0"
      ]
    },
    "364": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "367": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "368": {
      "op": "return",
      "stack_out": []
    },
    "369": {
      "block": "main_latestTimestamp_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "371": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "372": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "373": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "375": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "376": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.latestTimestamp",
      "op": "callsub latestTimestamp",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "379": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "380": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "381": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "382": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "383": {
      "op": "log",
      "stack_out": []
    },
    "384": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "385": {
      "op": "return",
      "stack_out": []
    },
    "386": {
      "block": "main_getMBRDepositAmount_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "388": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "389": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "390": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "392": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "393": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.getMBRDepositAmount",
      "op": "callsub getMBRDepositAmount",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "396": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "397": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "400": {
      "op": "log",
      "stack_out": []
    },
    "401": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "402": {
      "op": "return",
      "stack_out": []
    },
    "403": {
      "block": "main_getEscrow_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "405": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "406": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "407": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "409": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "410": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[32]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[32]%3#0"
      ]
    },
    "413": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.getEscrow",
      "op": "callsub getEscrow",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "416": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "0x151f7c75"
      ]
    },
    "417": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%20#0"
      ]
    },
    "418": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "419": {
      "op": "log",
      "stack_out": []
    },
    "420": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "421": {
      "op": "return",
      "stack_out": []
    },
    "422": {
      "block": "main_makeHash_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "424": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "425": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "426": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "428": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "429": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "432": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.makeHash",
      "op": "callsub makeHash",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "435": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "436": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "437": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "438": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "443": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "446": {
      "op": "log",
      "stack_out": []
    },
    "447": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "448": {
      "op": "return",
      "stack_out": []
    },
    "449": {
      "block": "main_create_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "451": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "452": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "453": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "455": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "456": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "458": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "2"
      ]
    },
    "460": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "461": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0"
      ]
    },
    "463": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%8#0",
        "1"
      ]
    },
    "464": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "465": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "466": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0"
      ]
    },
    "468": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "469": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "470": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0"
      ]
    },
    "471": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "474": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%9#0"
      ]
    },
    "475": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%9#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "478": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%9#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0"
      ]
    },
    "481": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%9#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0"
      ]
    },
    "484": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "reinterpret_bytes[256]%0#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%9#0",
        "reinterpret_bytes[32]%0#0",
        "reinterpret_bytes[32]%1#0",
        "reinterpret_bytes[32]%2#0",
        "reinterpret_bytes[256]%0#0"
      ]
    },
    "487": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow.create",
      "op": "callsub create",
      "stack_out": []
    },
    "490": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "491": {
      "op": "return",
      "stack_out": []
    },
    "492": {
      "block": "main_bare_routing@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "494": {
      "op": "bnz main_after_if_else@21",
      "stack_out": []
    },
    "497": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "499": {
      "op": "!",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "500": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "501": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "502": {
      "op": "return",
      "stack_out": []
    },
    "503": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.create",
      "params": {
        "txnDeposit#0": "uint64",
        "txnMBRDeposit#0": "uint64",
        "rescueDelay#0": "uint64",
        "secretHash#0": "bytes",
        "taker#0": "bytes",
        "destinationSetter#0": "bytes",
        "memo#0": "bytes"
      },
      "block": "create",
      "stack_in": [],
      "op": "proto 7 0"
    },
    "506": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "507": {
      "op": "dup",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0"
      ]
    },
    "508": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0"
      ]
    },
    "510": {
      "op": "dup",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0"
      ]
    },
    "511": {
      "op": "intc_1 // 0"
    },
    "512": {
      "op": "dupn 2"
    },
    "514": {
      "op": "frame_dig -4"
    },
    "516": {
      "op": "bytec_2 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "amount#0",
        "depositIsValid#0",
        "secretHash#0 (copy)",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "secretHash#0 (copy)",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "517": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%0#0"
      ]
    },
    "518": {
      "op": "!",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%1#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%1#0"
      ]
    },
    "519": {
      "error": "Secret hash cannot be empty",
      "op": "assert // Secret hash cannot be empty",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0"
      ]
    },
    "520": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%2#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "tmp%2#0"
      ]
    },
    "522": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "amount#0",
        "check%0#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "check%0#0"
      ]
    },
    "524": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0"
      ]
    },
    "525": {
      "op": "frame_dig -6",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tokenId#0",
        "txnMBRDeposit#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "txnMBRDeposit#0 (copy)"
      ]
    },
    "527": {
      "op": "gtxns Receiver",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%3#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%3#0"
      ]
    },
    "529": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%3#0",
        "tmp%4#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "531": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%5#0"
      ]
    },
    "532": {
      "error": "MBR deposit must be send to the escrow app",
      "op": "assert // MBR deposit must be send to the escrow app",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0"
      ]
    },
    "533": {
      "op": "bytec_3 // \"e\"",
      "defined_out": [
        "\"e\"",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "\"e\""
      ]
    },
    "534": {
      "op": "frame_dig -4",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "536": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0"
      ]
    },
    "537": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "538": {
      "op": "box_len",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "539": {
      "op": "bury 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "maybe_exists%0#0"
      ]
    },
    "541": {
      "op": "!",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%7#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "542": {
      "error": "Escrow with the same id already exists",
      "op": "assert // Escrow with the same id already exists",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0"
      ]
    },
    "543": {
      "op": "frame_dig -7",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tokenId#0",
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "545": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "547": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "548": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0",
        "1"
      ]
    },
    "549": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%9#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "550": {
      "op": "bz create_after_if_else@2",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "553": {
      "op": "frame_dig -7",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "555": {
      "op": "gtxns Receiver",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%10#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "557": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "559": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%12#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%12#0"
      ]
    },
    "560": {
      "error": "Receiver must be the escrow app",
      "op": "assert // Receiver must be the escrow app",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "561": {
      "op": "frame_dig -7",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "563": {
      "op": "gtxns Sender",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%13#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0"
      ]
    },
    "565": {
      "op": "txn Sender",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "567": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%15#0"
      ]
    },
    "568": {
      "error": "Sender of deposit must be the same as the sender of the app call",
      "op": "assert // Sender of deposit must be the same as the sender of the app call",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "569": {
      "op": "frame_dig -7",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "571": {
      "op": "gtxns Amount",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "amount#0"
      ]
    },
    "573": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "575": {
      "op": "intc_0 // 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "depositIsValid#0"
      ]
    },
    "576": {
      "op": "frame_bury 6",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "578": {
      "block": "create_after_if_else@2",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "frame_dig 9",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "580": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%8#0",
        "4"
      ]
    },
    "582": {
      "op": "==",
      "defined_out": [
        "tmp%17#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%17#0"
      ]
    },
    "583": {
      "op": "bz create_after_if_else@4",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "586": {
      "op": "frame_dig -7",
      "defined_out": [
        "tmp%8#0",
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "588": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%18#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%18#0"
      ]
    },
    "590": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "592": {
      "op": "==",
      "defined_out": [
        "tmp%20#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%20#0"
      ]
    },
    "593": {
      "error": "Receiver must be the escrow app",
      "op": "assert // Receiver must be the escrow app",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "594": {
      "op": "frame_dig -7",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "596": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "amount#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "amount#0"
      ]
    },
    "598": {
      "op": "frame_bury 5",
      "defined_out": [
        "amount#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "600": {
      "op": "frame_dig -7",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "602": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "amount#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ]
    },
    "604": {
      "op": "frame_bury 4",
      "defined_out": [
        "amount#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "606": {
      "op": "intc_0 // 1",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "depositIsValid#0"
      ]
    },
    "607": {
      "op": "frame_bury 6",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%8#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "609": {
      "block": "create_after_if_else@4",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "amount#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "amount#0"
      ]
    },
    "611": {
      "error": "Deposit should be positive number",
      "op": "assert // Deposit should be positive number",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "612": {
      "op": "frame_dig 6",
      "defined_out": [
        "amount#0",
        "depositIsValid#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "depositIsValid#0"
      ]
    },
    "614": {
      "error": "Deposit must be asset transfer or payment",
      "op": "assert // Deposit must be asset transfer or payment",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "615": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "destinationSetter#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "destinationSetter#0 (copy)"
      ]
    },
    "617": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "amount#0",
        "depositIsValid#0",
        "destinationSetter#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "destinationSetter#0 (copy)",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "618": {
      "op": "!=",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%22#0"
      ]
    },
    "619": {
      "op": "bz create_after_if_else@6",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "622": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "destinationSetter#0 (copy)"
      ]
    },
    "624": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "destinationSetter#0 (copy)",
        "taker#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "destinationSetter#0 (copy)",
        "taker#0 (copy)"
      ]
    },
    "626": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "depositIsValid#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%23#0"
      ]
    },
    "627": {
      "error": "If destination setter is set, the taker must be set to the same account",
      "op": "assert // If destination setter is set, the taker must be set to the same account",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "628": {
      "block": "create_after_if_else@6",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ]
    },
    "630": {
      "op": "bnz create_else_body@10",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "633": {
      "op": "frame_dig 4",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ]
    },
    "635": {
      "op": "itob",
      "defined_out": [
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN#0"
      ]
    },
    "636": {
      "op": "intc_1 // 0",
      "defined_out": [
        "prevDeposits#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN#0",
        "prevDeposits#0"
      ]
    },
    "637": {
      "op": "frame_bury 2",
      "defined_out": [
        "prevDeposits#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN#0"
      ]
    },
    "639": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "prevDeposits#0",
        "tokenId#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN#0",
        "\"d\""
      ]
    },
    "640": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "\"d\"",
        "tokenIdN#0"
      ]
    },
    "641": {
      "op": "concat",
      "defined_out": [
        "prevDeposits#0",
        "tmp%25#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%25#0"
      ]
    },
    "642": {
      "op": "dup",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%25#0",
        "tmp%25#0"
      ]
    },
    "643": {
      "op": "frame_bury 0",
      "defined_out": [
        "prevDeposits#0",
        "tmp%25#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%25#0"
      ]
    },
    "645": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "prevDeposits#0",
        "tmp%25#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "646": {
      "op": "bury 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_exists%1#0"
      ]
    },
    "648": {
      "op": "bz create_after_if_else@9",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "651": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%25#0"
      ]
    },
    "653": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "prevDeposits#0",
        "tmp%25#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "654": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%2#0"
      ]
    },
    "655": {
      "op": "btoi",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "prevDeposits#0"
      ]
    },
    "656": {
      "op": "frame_bury 2",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "658": {
      "block": "create_after_if_else@9",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "prevDeposits#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "prevDeposits#0"
      ]
    },
    "660": {
      "op": "frame_dig 5",
      "defined_out": [
        "amount#0",
        "prevDeposits#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "prevDeposits#0",
        "amount#0"
      ]
    },
    "662": {
      "op": "+",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%27#0"
      ]
    },
    "663": {
      "op": "frame_dig -6",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%27#0",
        "txnMBRDeposit#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%27#0",
        "txnMBRDeposit#0 (copy)"
      ]
    },
    "665": {
      "op": "gtxns Amount",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "667": {
      "op": "+",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%0#0"
      ]
    },
    "668": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "val_as_bytes%1#0"
      ]
    },
    "669": {
      "op": "frame_dig 0",
      "defined_out": [
        "amount#0",
        "prevDeposits#0",
        "tmp%25#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "val_as_bytes%1#0",
        "tmp%25#0"
      ]
    },
    "671": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%25#0",
        "val_as_bytes%1#0"
      ]
    },
    "672": {
      "op": "box_put",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "673": {
      "block": "create_after_if_else@15",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0"
      ]
    },
    "675": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%37#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "to_encode%3#0"
      ]
    },
    "677": {
      "op": "itob",
      "defined_out": [
        "tmp%37#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0"
      ]
    },
    "678": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%37#0",
        "tmp%38#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "tmp%38#0"
      ]
    },
    "680": {
      "op": "frame_dig -5",
      "defined_out": [
        "rescueDelay#0 (copy)",
        "tmp%37#0",
        "tmp%38#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "tmp%38#0",
        "rescueDelay#0 (copy)"
      ]
    },
    "682": {
      "op": "+",
      "defined_out": [
        "tmp%37#0",
        "to_encode%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "to_encode%4#0"
      ]
    },
    "683": {
      "op": "itob",
      "defined_out": [
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "684": {
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%37#0",
        "tokenId#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "tokenId#0"
      ]
    },
    "686": {
      "op": "itob",
      "defined_out": [
        "tmp%37#0",
        "tokenId#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ]
    },
    "687": {
      "op": "frame_dig 5",
      "defined_out": [
        "amount#0",
        "tmp%37#0",
        "tokenId#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "amount#0"
      ]
    },
    "689": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "tmp%37#0",
        "tokenId#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ]
    },
    "690": {
      "op": "frame_dig -6",
      "defined_out": [
        "amount#0",
        "tmp%37#0",
        "tokenId#0",
        "txnMBRDeposit#0 (copy)",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "txnMBRDeposit#0 (copy)"
      ]
    },
    "692": {
      "op": "gtxns Amount",
      "defined_out": [
        "amount#0",
        "tmp%37#0",
        "to_encode%5#0",
        "tokenId#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "to_encode%5#0"
      ]
    },
    "694": {
      "op": "dup",
      "defined_out": [
        "amount#0",
        "tmp%37#0",
        "to_encode%5#0",
        "to_encode%5#0 (copy)",
        "tokenId#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "to_encode%5#0",
        "to_encode%5#0 (copy)"
      ]
    },
    "695": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "tmp%37#0",
        "to_encode%5#0",
        "tokenId#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "to_encode%5#0",
        "val_as_bytes%9#0"
      ]
    },
    "696": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%6#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "to_encode%5#0",
        "val_as_bytes%9#0",
        "val_as_bytes%5#0"
      ]
    },
    "698": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "to_encode%5#0",
        "val_as_bytes%9#0",
        "val_as_bytes%5#0",
        "val_as_bytes%6#0"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%2#0",
        "tmp%37#0",
        "to_encode%5#0",
        "tokenId#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%7#0",
        "val_as_bytes%8#0",
        "to_encode%5#0",
        "val_as_bytes%9#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "701": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%8#0",
        "to_encode%5#0",
        "val_as_bytes%9#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%7#0"
      ]
    },
    "703": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%3#0",
        "tmp%37#0",
        "to_encode%5#0",
        "tokenId#0",
        "val_as_bytes%8#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "val_as_bytes%8#0",
        "to_encode%5#0",
        "val_as_bytes%9#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "704": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "to_encode%5#0",
        "val_as_bytes%9#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%8#0"
      ]
    },
    "706": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%4#0",
        "tmp%37#0",
        "to_encode%5#0",
        "tokenId#0",
        "val_as_bytes%9#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "to_encode%5#0",
        "val_as_bytes%9#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "707": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%9#0"
      ]
    },
    "708": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%5#0",
        "tmp%37#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%37#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "709": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%5#0",
        "tmp%37#0"
      ]
    },
    "711": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%6#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "712": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0",
        "destinationSetter#0 (copy)",
        "encoded_tuple_buffer%6#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%6#0",
        "destinationSetter#0 (copy)"
      ]
    },
    "714": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%7#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "715": {
      "op": "frame_dig -3",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%7#0",
        "taker#0 (copy)",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%7#0",
        "taker#0 (copy)"
      ]
    },
    "717": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%8#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "718": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%8#0",
        "memo#0 (copy)",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%8#0",
        "memo#0 (copy)"
      ]
    },
    "720": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%9#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "721": {
      "op": "frame_dig -4",
      "defined_out": [
        "amount#0",
        "encoded_tuple_buffer%9#0",
        "secretHash#0 (copy)",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "encoded_tuple_buffer%9#0",
        "secretHash#0 (copy)"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "amount#0",
        "escrow#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "escrow#0"
      ]
    },
    "724": {
      "op": "frame_dig 8",
      "defined_out": [
        "amount#0",
        "escrow#0",
        "tmp%6#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "escrow#0",
        "tmp%6#0"
      ]
    },
    "726": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "tmp%6#0",
        "escrow#0"
      ]
    },
    "727": {
      "op": "box_put",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0"
      ]
    },
    "728": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amount#0",
        "tmp%40#0",
        "tmp%6#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "tmp%40#0"
      ]
    },
    "730": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "amount#0",
        "check%1#0",
        "mbrAtEnd#0",
        "tmp%6#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "mbrAtEnd#0",
        "check%1#0"
      ]
    },
    "732": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "mbrAtEnd#0"
      ]
    },
    "733": {
      "op": "frame_dig 7",
      "defined_out": [
        "amount#0",
        "mbrAtEnd#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "mbrAtEnd#0",
        "mbrAtStart#0"
      ]
    },
    "735": {
      "op": "-",
      "defined_out": [
        "amount#0",
        "mbrAtStart#0",
        "tmp%41#0",
        "tmp%6#0",
        "to_encode%5#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%5#0",
        "tmp%41#0"
      ]
    },
    "736": {
      "op": "==",
      "defined_out": [
        "amount#0",
        "mbrAtStart#0",
        "tmp%43#0",
        "tmp%6#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%43#0"
      ]
    },
    "737": {
      "error": "MBR increment must equal mbr deposit tx amount",
      "op": "assert // MBR increment must equal mbr deposit tx amount",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "738": {
      "retsub": true,
      "op": "retsub"
    },
    "739": {
      "block": "create_else_body@10",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenId#0"
      ]
    },
    "741": {
      "op": "itob",
      "defined_out": [
        "tokenId#0",
        "tokenIdN\u2081#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN\u2081#0"
      ]
    },
    "742": {
      "op": "intc_1 // 0",
      "defined_out": [
        "prevDeposits\u2081#0",
        "tokenId#0",
        "tokenIdN\u2081#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN\u2081#0",
        "prevDeposits\u2081#0"
      ]
    },
    "743": {
      "op": "frame_bury 3",
      "defined_out": [
        "prevDeposits\u2081#0",
        "tokenId#0",
        "tokenIdN\u2081#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN\u2081#0"
      ]
    },
    "745": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "tokenIdN\u2081#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tokenIdN\u2081#0",
        "\"d\""
      ]
    },
    "746": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "\"d\"",
        "tokenIdN\u2081#0"
      ]
    },
    "747": {
      "op": "concat",
      "defined_out": [
        "prevDeposits\u2081#0",
        "tmp%30#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%30#0"
      ]
    },
    "748": {
      "op": "dup",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%30#0",
        "tmp%30#0"
      ]
    },
    "749": {
      "op": "frame_bury 1",
      "defined_out": [
        "prevDeposits\u2081#0",
        "tmp%30#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%30#0"
      ]
    },
    "751": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "prevDeposits\u2081#0",
        "tmp%30#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "752": {
      "op": "bury 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_exists%3#0"
      ]
    },
    "754": {
      "op": "bz create_after_if_else@12",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "757": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%30#0"
      ]
    },
    "759": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "prevDeposits\u2081#0",
        "tmp%30#0",
        "tokenId#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "760": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%4#0"
      ]
    },
    "761": {
      "op": "btoi",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "prevDeposits\u2081#0"
      ]
    },
    "762": {
      "op": "frame_bury 3",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "764": {
      "block": "create_after_if_else@12",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "prevDeposits\u2081#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "prevDeposits\u2081#0"
      ]
    },
    "766": {
      "op": "frame_dig 5",
      "defined_out": [
        "amount#0",
        "prevDeposits\u2081#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "prevDeposits\u2081#0",
        "amount#0"
      ]
    },
    "768": {
      "op": "+",
      "defined_out": [
        "amount#0",
        "prevDeposits\u2081#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "to_encode%1#0"
      ]
    },
    "769": {
      "op": "itob",
      "defined_out": [
        "amount#0",
        "prevDeposits\u2081#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "val_as_bytes%3#0"
      ]
    },
    "770": {
      "op": "frame_dig 1",
      "defined_out": [
        "amount#0",
        "prevDeposits\u2081#0",
        "tmp%30#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "val_as_bytes%3#0",
        "tmp%30#0"
      ]
    },
    "772": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%30#0",
        "val_as_bytes%3#0"
      ]
    },
    "773": {
      "op": "box_put",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "774": {
      "op": "bytec 4 // 0x640000000000000000",
      "defined_out": [
        "0x640000000000000000",
        "amount#0",
        "prevDeposits\u2081#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "0x640000000000000000"
      ]
    },
    "776": {
      "op": "box_len",
      "defined_out": [
        "amount#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "prevDeposits\u2081#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "777": {
      "op": "bury 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_exists%5#0"
      ]
    },
    "779": {
      "op": "bz create_after_if_else@14",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "782": {
      "op": "bytec 4 // 0x640000000000000000",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "0x640000000000000000"
      ]
    },
    "784": {
      "op": "box_get",
      "defined_out": [
        "amount#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "prevDeposits\u2081#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "785": {
      "op": "bury 1",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "maybe_exists%6#0"
      ]
    },
    "787": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "788": {
      "block": "create_after_if_else@14",
      "stack_in": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "op": "frame_dig -6",
      "defined_out": [
        "txnMBRDeposit#0 (copy)"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "txnMBRDeposit#0 (copy)"
      ]
    },
    "790": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "tmp%35#0"
      ]
    },
    "792": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "val_as_bytes%4#0"
      ]
    },
    "793": {
      "op": "bytec 4 // 0x640000000000000000",
      "defined_out": [
        "0x640000000000000000",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "val_as_bytes%4#0",
        "0x640000000000000000"
      ]
    },
    "795": {
      "op": "swap",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0",
        "0x640000000000000000",
        "val_as_bytes%4#0"
      ]
    },
    "796": {
      "op": "box_put",
      "stack_out": [
        "tmp%25#0",
        "tmp%30#0",
        "prevDeposits#0",
        "prevDeposits\u2081#0",
        "tokenId#0",
        "amount#0",
        "depositIsValid#0",
        "mbrAtStart#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "797": {
      "op": "b create_after_if_else@15"
    },
    "800": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.makeHash",
      "params": {
        "secret#0": "bytes"
      },
      "block": "makeHash",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "803": {
      "op": "frame_dig -1",
      "defined_out": [
        "secret#0 (copy)"
      ],
      "stack_out": [
        "secret#0 (copy)"
      ]
    },
    "805": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "806": {
      "retsub": true,
      "op": "retsub"
    },
    "807": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.getEscrow",
      "params": {
        "secretHash#0": "bytes"
      },
      "block": "getEscrow",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "810": {
      "op": "bytec_3 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "811": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "813": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "814": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "815": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "816": {
      "retsub": true,
      "op": "retsub"
    },
    "817": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.getMBRDepositAmount",
      "params": {},
      "block": "getMBRDepositAmount",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "819": {
      "op": "itob",
      "defined_out": [
        "n#0"
      ],
      "stack_out": [
        "n#0"
      ]
    },
    "820": {
      "op": "txn Sender",
      "defined_out": [
        "address#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "address#0"
      ]
    },
    "822": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "address#0",
        "n#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "n#0",
        "address#0",
        "tmp%0#0"
      ]
    },
    "824": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "address#0",
        "check%0#0",
        "mbrAtStart#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "check%0#0"
      ]
    },
    "826": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0"
      ]
    },
    "827": {
      "op": "dig 2",
      "defined_out": [
        "address#0",
        "mbrAtStart#0",
        "n#0",
        "n#0 (copy)"
      ],
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "n#0 (copy)"
      ]
    },
    "829": {
      "op": "dig 3",
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "n#0 (copy)",
        "n#0 (copy)"
      ]
    },
    "831": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "encoded_tuple_buffer%2#0",
        "mbrAtStart#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "832": {
      "op": "dig 3",
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%2#0",
        "n#0 (copy)"
      ]
    },
    "834": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "encoded_tuple_buffer%3#0",
        "mbrAtStart#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "835": {
      "op": "dig 3",
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%3#0",
        "n#0 (copy)"
      ]
    },
    "837": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "encoded_tuple_buffer%4#0",
        "mbrAtStart#0",
        "n#0"
      ],
      "stack_out": [
        "n#0",
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "838": {
      "op": "uncover 3",
      "stack_out": [
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%4#0",
        "n#0"
      ]
    },
    "840": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "encoded_tuple_buffer%5#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "841": {
      "op": "dig 2",
      "defined_out": [
        "address#0",
        "address#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%5#0",
        "address#0 (copy)"
      ]
    },
    "843": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "encoded_tuple_buffer%6#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "844": {
      "op": "dig 2",
      "stack_out": [
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%6#0",
        "address#0 (copy)"
      ]
    },
    "846": {
      "op": "concat",
      "defined_out": [
        "address#0",
        "encoded_tuple_buffer%7#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "address#0",
        "mbrAtStart#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "847": {
      "op": "uncover 2",
      "stack_out": [
        "mbrAtStart#0",
        "encoded_tuple_buffer%7#0",
        "address#0"
      ]
    },
    "849": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "850": {
      "op": "pushbytes 0x
      "defined_out": [
        "0x
        "encoded_tuple_buffer%8#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "encoded_tuple_buffer%8#0",
        "0x
      ]
    },
    "1109": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1110": {
      "op": "bytec_2 // 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000",
        "encoded_tuple_buffer%9#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "encoded_tuple_buffer%9#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1111": {
      "op": "concat",
      "defined_out": [
        "mbrAtStart#0",
        "sampleBox#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "sampleBox#0"
      ]
    },
    "1112": {
      "op": "bytec 5 // 0x650000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x650000000000000000000000000000000000000000000000000000000000000000",
        "mbrAtStart#0",
        "sampleBox#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "sampleBox#0",
        "0x650000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1114": {
      "op": "swap",
      "stack_out": [
        "mbrAtStart#0",
        "0x650000000000000000000000000000000000000000000000000000000000000000",
        "sampleBox#0"
      ]
    },
    "1115": {
      "op": "box_put",
      "stack_out": [
        "mbrAtStart#0"
      ]
    },
    "1116": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "mbrAtStart#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "tmp%2#0"
      ]
    },
    "1118": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "check%1#0",
        "mbrAtEnd#0",
        "mbrAtStart#0"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "mbrAtEnd#0",
        "check%1#0"
      ]
    },
    "1120": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "mbrAtStart#0",
        "mbrAtEnd#0"
      ]
    },
    "1121": {
      "op": "bytec 5 // 0x650000000000000000000000000000000000000000000000000000000000000000",
      "stack_out": [
        "mbrAtStart#0",
        "mbrAtEnd#0",
        "0x650000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "1123": {
      "op": "box_del",
      "defined_out": [
        "mbrAtEnd#0",
        "mbrAtStart#0",
        "{box_del}"
      ],
      "stack_out": [
        "mbrAtStart#0",
        "mbrAtEnd#0",
        "{box_del}"
      ]
    },
    "1124": {
      "op": "pop",
      "stack_out": [
        "mbrAtStart#0",
        "mbrAtEnd#0"
      ]
    },
    "1125": {
      "op": "swap",
      "stack_out": [
        "mbrAtEnd#0",
        "mbrAtStart#0"
      ]
    },
    "1126": {
      "op": "-",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1127": {
      "retsub": true,
      "op": "retsub"
    },
    "1128": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.latestTimestamp",
      "params": {},
      "block": "latestTimestamp",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1130": {
      "retsub": true,
      "op": "retsub"
    },
    "1131": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.withdraw",
      "params": {
        "secretHash#0": "bytes",
        "secret#0": "bytes"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1134": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1135": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0"
      ]
    },
    "1137": {
      "op": "bytec_3 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "\"e\""
      ]
    },
    "1138": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "1140": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "1141": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1142": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1143": {
      "op": "bury 1",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1145": {
      "error": "The escrow does not exists",
      "op": "assert // The escrow does not exists",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "1146": {
      "op": "frame_dig -1",
      "defined_out": [
        "secret#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "secret#0 (copy)"
      ]
    },
    "1148": {
      "op": "keccak256",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1149": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "tmp%1#0",
        "secretHash#0 (copy)"
      ]
    },
    "1151": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "1152": {
      "error": "The password is not correct",
      "op": "assert // The password is not correct",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0"
      ]
    },
    "1153": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1154": {
      "op": "box_get",
      "defined_out": [
        "escrow#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0"
      ]
    },
    "1155": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "escrow#0"
      ]
    },
    "1156": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1157": {
      "op": "cover 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0",
        "escrow#0"
      ]
    },
    "1159": {
      "op": "cover 3",
      "defined_out": [
        "escrow#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0"
      ]
    },
    "1161": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "1162": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0"
      ]
    },
    "1164": {
      "op": "dig 1",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0",
        "escrow#0 (copy)"
      ]
    },
    "1166": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0",
        "escrow#0 (copy)",
        "8"
      ]
    },
    "1168": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "1169": {
      "op": "<",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%7#0"
      ]
    },
    "1170": {
      "error": "Escrow can be redeemed with password up to the rescue time",
      "op": "assert // Escrow can be redeemed with password up to the rescue time",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "1171": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1172": {
      "error": "Index access is out of bounds",
      "op": "extract 72 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%8#0"
      ]
    },
    "1175": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "escrow#0",
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%8#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1176": {
      "op": "==",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%9#0"
      ]
    },
    "1177": {
      "error": "The funds cannot be withdrawn until destination setter sets the real taker",
      "op": "assert // The funds cannot be withdrawn until destination setter sets the real taker",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "1178": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "escrow#0",
        "tmp%0#0"
      ]
    },
    "1179": {
      "op": "box_del",
      "defined_out": [
        "escrow#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "escrow#0",
        "{box_del}"
      ]
    },
    "1180": {
      "op": "pop",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "escrow#0"
      ]
    },
    "1181": {
      "error": "Index access is out of bounds",
      "op": "extract 104 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrow#0",
        "sendTo#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1184": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "sendTo#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "sendTo#0"
      ]
    },
    "1185": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "sendTo#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1186": {
      "op": "==",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%11#0"
      ]
    },
    "1187": {
      "op": "bz withdraw_after_if_else@2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1190": {
      "op": "txn Sender",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "sendTo#0"
      ]
    },
    "1192": {
      "op": "frame_bury 3",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1194": {
      "block": "withdraw_after_if_else@2",
      "stack_in": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "escrow#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0"
      ]
    },
    "1196": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "escrow#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "16"
      ]
    },
    "1198": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0"
      ]
    },
    "1199": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%13#0"
      ]
    },
    "1200": {
      "op": "frame_bury 1",
      "defined_out": [
        "escrow#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0"
      ]
    },
    "1202": {
      "op": "bnz withdraw_else_body@7",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1205": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0"
      ]
    },
    "1207": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrow#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%15#0"
      ]
    },
    "1210": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%15#0",
        "tmp%15#0"
      ]
    },
    "1211": {
      "op": "frame_bury 0",
      "defined_out": [
        "escrow#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%15#0"
      ]
    },
    "1213": {
      "op": "frame_dig 3",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%15#0",
        "sendTo#0"
      ]
    },
    "1215": {
      "op": "==",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%16#0"
      ]
    },
    "1216": {
      "op": "bz withdraw_else_body@5",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1219": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0"
      ]
    },
    "1221": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1222": {
      "op": "intc_2 // 24",
      "defined_out": [
        "24",
        "escrow#0",
        "escrow#0 (copy)",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "escrow#0 (copy)",
        "24"
      ]
    },
    "1223": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%20#0"
      ]
    },
    "1224": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%20#0",
        "escrow#0"
      ]
    },
    "1225": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%20#0",
        "escrow#0",
        "32"
      ]
    },
    "1226": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%20#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%20#0",
        "tmp%22#0"
      ]
    },
    "1227": {
      "op": "+",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%23#0"
      ]
    },
    "1228": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%23#0",
        "sendTo#0"
      ]
    },
    "1230": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%23#0",
        "sendTo#0",
        "tmp%13#0"
      ]
    },
    "1232": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%23#0"
      ]
    },
    "1234": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1237": {
      "retsub": true,
      "op": "retsub"
    },
    "1238": {
      "block": "withdraw_else_body@5",
      "stack_in": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "escrow#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0"
      ]
    },
    "1240": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1241": {
      "op": "intc_2 // 24",
      "defined_out": [
        "24",
        "escrow#0",
        "escrow#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "escrow#0 (copy)",
        "24"
      ]
    },
    "1242": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%27#0"
      ]
    },
    "1243": {
      "op": "frame_dig 3",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%27#0",
        "sendTo#0"
      ]
    },
    "1245": {
      "op": "frame_dig 1",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%27#0",
        "sendTo#0",
        "tmp%13#0"
      ]
    },
    "1247": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%27#0"
      ]
    },
    "1249": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0"
      ]
    },
    "1252": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "32"
      ]
    },
    "1253": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%30#0"
      ]
    },
    "1254": {
      "op": "frame_dig 0",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%30#0",
        "tmp%15#0"
      ]
    },
    "1256": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%30#0",
        "tmp%15#0",
        "0"
      ]
    },
    "1257": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%15#0",
        "0",
        "tmp%30#0"
      ]
    },
    "1259": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1262": {
      "retsub": true,
      "op": "retsub"
    },
    "1263": {
      "block": "withdraw_else_body@7",
      "stack_in": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "escrow#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0"
      ]
    },
    "1265": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1266": {
      "op": "intc_2 // 24",
      "defined_out": [
        "24",
        "escrow#0",
        "escrow#0 (copy)"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "escrow#0 (copy)",
        "24"
      ]
    },
    "1267": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%34#0"
      ]
    },
    "1268": {
      "op": "frame_dig 3",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%34#0",
        "sendTo#0"
      ]
    },
    "1270": {
      "op": "frame_dig 1",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%34#0",
        "sendTo#0",
        "tmp%13#0"
      ]
    },
    "1272": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%34#0"
      ]
    },
    "1274": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0"
      ]
    },
    "1277": {
      "op": "dup",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1278": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "escrow#0",
        "tmp%35#0"
      ]
    },
    "1281": {
      "op": "swap",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%35#0",
        "escrow#0"
      ]
    },
    "1282": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%35#0",
        "escrow#0",
        "32"
      ]
    },
    "1283": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%35#0",
        "tmp%37#0"
      ]
    },
    "1284": {
      "op": "intc_1 // 0"
    },
    "1285": {
      "op": "swap",
      "defined_out": [
        "0",
        "escrow#0",
        "sendTo#0",
        "tmp%13#0",
        "tmp%35#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0",
        "tmp%35#0",
        "0",
        "tmp%37#0"
      ]
    },
    "1286": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "tmp%15#0",
        "tmp%13#0",
        "escrow#0",
        "sendTo#0"
      ]
    },
    "1289": {
      "retsub": true,
      "op": "retsub"
    },
    "1290": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.cancel",
      "params": {
        "secretHash#0": "bytes"
      },
      "block": "cancel",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1293": {
      "op": "bytec_3 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "1294": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "1296": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1297": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1298": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1299": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1301": {
      "error": "The escrow does not exists",
      "op": "assert // The escrow does not exists",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1302": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1303": {
      "op": "box_get",
      "defined_out": [
        "escrow#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0"
      ]
    },
    "1304": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "escrow#0"
      ]
    },
    "1305": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1306": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0",
        "escrow#0"
      ]
    },
    "1308": {
      "op": "cover 3",
      "defined_out": [
        "escrow#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0"
      ]
    },
    "1310": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "1311": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1312": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)",
        "8"
      ]
    },
    "1314": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%3#0"
      ]
    },
    "1315": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1317": {
      "op": "<",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0",
        "tmp%5#0"
      ]
    },
    "1318": {
      "error": "The escrow cannot be canceled yet",
      "op": "assert // The escrow cannot be canceled yet",
      "stack_out": [
        "escrow#0",
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "1319": {
      "op": "swap",
      "stack_out": [
        "escrow#0",
        "escrow#0",
        "tmp%0#0"
      ]
    },
    "1320": {
      "op": "box_del",
      "defined_out": [
        "escrow#0",
        "{box_del}"
      ],
      "stack_out": [
        "escrow#0",
        "escrow#0",
        "{box_del}"
      ]
    },
    "1321": {
      "op": "pop",
      "stack_out": [
        "escrow#0",
        "escrow#0"
      ]
    },
    "1322": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "escrow#0"
      ],
      "stack_out": [
        "escrow#0",
        "escrow#0",
        "16"
      ]
    },
    "1324": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0"
      ]
    },
    "1325": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "tmp%8#0"
      ]
    },
    "1326": {
      "op": "bnz cancel_else_body@2",
      "stack_out": [
        "escrow#0",
        "tmp%8#0"
      ]
    },
    "1329": {
      "op": "frame_dig 0",
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0"
      ]
    },
    "1331": {
      "op": "dup",
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1332": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrow#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%10#0"
      ]
    },
    "1335": {
      "op": "dig 1",
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%10#0",
        "escrow#0 (copy)"
      ]
    },
    "1337": {
      "op": "intc_2 // 24",
      "defined_out": [
        "24",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%10#0",
        "escrow#0 (copy)",
        "24"
      ]
    },
    "1338": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%10#0",
        "tmp%14#0"
      ]
    },
    "1339": {
      "op": "uncover 2",
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%14#0",
        "escrow#0"
      ]
    },
    "1341": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "escrow#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%14#0",
        "escrow#0",
        "32"
      ]
    },
    "1342": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%16#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "1343": {
      "op": "+",
      "defined_out": [
        "escrow#0",
        "tmp%10#0",
        "tmp%17#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "tmp%10#0",
        "tmp%17#0"
      ]
    },
    "1344": {
      "op": "swap",
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "tmp%17#0",
        "tmp%10#0"
      ]
    },
    "1345": {
      "op": "cover 2",
      "stack_out": [
        "escrow#0",
        "tmp%10#0",
        "tmp%8#0",
        "tmp%17#0"
      ]
    },
    "1347": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "escrow#0"
      ]
    },
    "1350": {
      "retsub": true,
      "op": "retsub"
    },
    "1351": {
      "block": "cancel_else_body@2",
      "stack_in": [
        "escrow#0",
        "tmp%8#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "escrow#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0"
      ]
    },
    "1353": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1354": {
      "error": "Index access is out of bounds",
      "op": "extract 40 32 // on error: Index access is out of bounds",
      "defined_out": [
        "escrow#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%18#0"
      ]
    },
    "1357": {
      "op": "dig 1",
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%18#0",
        "escrow#0 (copy)"
      ]
    },
    "1359": {
      "op": "intc_2 // 24",
      "defined_out": [
        "24",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%18#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%18#0",
        "escrow#0 (copy)",
        "24"
      ]
    },
    "1360": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%18#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%18#0",
        "tmp%22#0"
      ]
    },
    "1361": {
      "op": "dig 1",
      "defined_out": [
        "escrow#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%22#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%8#0",
        "escrow#0",
        "tmp%18#0",
        "tmp%22#0",
        "tmp%18#0 (copy)"
      ]
    },
    "1363": {
      "op": "uncover 4",
      "defined_out": [
        "escrow#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%22#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "escrow#0",
        "escrow#0",
        "tmp%18#0",
        "tmp%22#0",
        "tmp%18#0 (copy)",
        "tmp%8#0"
      ]
    },
    "1365": {
      "op": "uncover 2",
      "stack_out": [
        "escrow#0",
        "escrow#0",
        "tmp%18#0",
        "tmp%18#0 (copy)",
        "tmp%8#0",
        "tmp%22#0"
      ]
    },
    "1367": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "escrow#0",
        "escrow#0",
        "tmp%18#0"
      ]
    },
    "1370": {
      "op": "swap",
      "stack_out": [
        "escrow#0",
        "tmp%18#0",
        "escrow#0"
      ]
    },
    "1371": {
      "op": "intc_3 // 32",
      "defined_out": [
        "32",
        "escrow#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%18#0",
        "escrow#0",
        "32"
      ]
    },
    "1372": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%18#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%18#0",
        "tmp%25#0"
      ]
    },
    "1373": {
      "op": "intc_1 // 0"
    },
    "1374": {
      "op": "swap",
      "defined_out": [
        "0",
        "escrow#0",
        "tmp%18#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "escrow#0",
        "tmp%18#0",
        "0",
        "tmp%25#0"
      ]
    },
    "1375": {
      "callsub": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "op": "callsub _send",
      "stack_out": [
        "escrow#0"
      ]
    },
    "1378": {
      "retsub": true,
      "op": "retsub"
    },
    "1379": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.setTaker",
      "params": {
        "secretHash#0": "bytes",
        "taker#0": "bytes"
      },
      "block": "setTaker",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1382": {
      "op": "bytec_3 // \"e\"",
      "defined_out": [
        "\"e\""
      ],
      "stack_out": [
        "\"e\""
      ]
    },
    "1383": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ],
      "stack_out": [
        "\"e\"",
        "secretHash#0 (copy)"
      ]
    },
    "1385": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1386": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1387": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1388": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1390": {
      "error": "The escrow does not exists",
      "op": "assert // The escrow does not exists",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1391": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1392": {
      "op": "box_get",
      "defined_out": [
        "escrow#0",
        "maybe_exists%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "maybe_exists%1#0"
      ]
    },
    "1393": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "1394": {
      "op": "dup",
      "defined_out": [
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)"
      ]
    },
    "1395": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "escrow#0",
        "escrow#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "escrow#0 (copy)",
        "8"
      ]
    },
    "1397": {
      "op": "extract_uint64",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%3#0"
      ]
    },
    "1398": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1400": {
      "op": ">=",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%5#0"
      ]
    },
    "1401": {
      "error": "The escrow cannot be modified after the rescue time has been reached",
      "op": "assert // The escrow cannot be modified after the rescue time has been reached",
      "stack_out": [
        "tmp%0#0",
        "escrow#0"
      ]
    },
    "1402": {
      "op": "txn Sender",
      "defined_out": [
        "escrow#0",
        "tmp%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "escrow#0",
        "tmp%6#0"
      ]
    },
    "1404": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "escrow#0"
      ]
    },
    "1405": {
      "error": "Index access is out of bounds",
      "op": "extract 72 32 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1408": {
      "op": "==",
      "defined_out": [
        "tmp%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%8#0"
      ]
    },
    "1409": {
      "error": "Destination setter is not valid",
      "op": "assert // Destination setter is not valid",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1410": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1411": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1412": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "1413": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%2#0",
        "taker#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%2#0",
        "taker#0 (copy)"
      ]
    },
    "1415": {
      "op": "replace2 104",
      "defined_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%0#0"
      ]
    },
    "1417": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "updated_data%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1419": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "updated_data%0#0"
      ]
    },
    "1420": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1421": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1422": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1423": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%3#0"
      ]
    },
    "1424": {
      "op": "bytec_2 // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)",
        "maybe_value%3#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%3#0",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "1425": {
      "op": "replace2 72",
      "defined_out": [
        "tmp%0#0",
        "updated_data%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "updated_data%1#0"
      ]
    },
    "1427": {
      "op": "box_put",
      "stack_out": []
    },
    "1428": {
      "retsub": true,
      "op": "retsub"
    },
    "1429": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.optInToToken",
      "params": {
        "txnDeposit#0": "uint64",
        "tokenId#0": "bytes"
      },
      "block": "optInToToken",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1432": {
      "op": "frame_dig -2",
      "defined_out": [
        "txnDeposit#0 (copy)"
      ],
      "stack_out": [
        "txnDeposit#0 (copy)"
      ]
    },
    "1434": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1436": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1438": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1439": {
      "error": "Receiver of the optin fee must be the current smart contract",
      "op": "assert // Receiver of the optin fee must be the current smart contract",
      "stack_out": []
    },
    "1440": {
      "op": "frame_dig -1",
      "defined_out": [
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tokenId#0 (copy)"
      ]
    },
    "1442": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1443": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1444": {
      "op": "bz optInToToken_after_if_else@4",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1447": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%3#0",
        "txnDeposit#0 (copy)"
      ]
    },
    "1449": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1451": {
      "op": "pushint 109300 // 109300",
      "defined_out": [
        "109300",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "109300"
      ]
    },
    "1455": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%6#0"
      ]
    },
    "1456": {
      "error": "Opt in fee to cover MBR for asset and box to track all deposits",
      "op": "assert // Opt in fee to cover MBR for asset and box to track all deposits",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1457": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%7#0"
      ]
    },
    "1459": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%3#0",
        "tmp%7#0",
        "tmp%3#0"
      ]
    },
    "1461": {
      "op": "dup",
      "defined_out": [
        "tmp%3#0",
        "tmp%3#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%7#0",
        "tmp%3#0 (copy)",
        "tmp%3#0 (copy)"
      ]
    },
    "1462": {
      "op": "cover 2",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0",
        "tmp%7#0",
        "tmp%3#0 (copy)"
      ]
    },
    "1464": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%10#0",
        "tmp%3#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1466": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0",
        "tmp%10#0"
      ]
    },
    "1468": {
      "op": "!",
      "defined_out": [
        "tmp%11#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0",
        "tmp%11#0"
      ]
    },
    "1469": {
      "error": "Asset is already opted in",
      "op": "assert // Asset is already opted in",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1470": {
      "op": "itxn_begin"
    },
    "1471": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1473": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1475": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0",
        "0"
      ]
    },
    "1476": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%3#0",
        "tmp%3#0"
      ]
    },
    "1478": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1480": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "4"
      ]
    },
    "1482": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1484": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "1485": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1487": {
      "op": "itxn_submit"
    },
    "1488": {
      "block": "optInToToken_after_if_else@4",
      "stack_in": [
        "tmp%3#0"
      ],
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\""
      ],
      "stack_out": [
        "tmp%3#0",
        "\"d\""
      ]
    },
    "1489": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"d\"",
        "tokenId#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "\"d\"",
        "tokenId#0 (copy)"
      ]
    },
    "1491": {
      "op": "concat",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%12#0"
      ]
    },
    "1492": {
      "op": "dup",
      "defined_out": [
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%12#0",
        "tmp%12#0 (copy)"
      ]
    },
    "1493": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%12#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1494": {
      "op": "bury 1",
      "stack_out": [
        "tmp%3#0",
        "tmp%12#0",
        "maybe_exists%0#0"
      ]
    },
    "1496": {
      "op": "!",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1497": {
      "error": "Box with all deposits must not exists when opting in",
      "op": "assert // Box with all deposits must not exists when opting in",
      "stack_out": [
        "tmp%3#0",
        "tmp%12#0"
      ]
    },
    "1498": {
      "op": "pushbytes 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%12#0",
        "0x0000000000000000"
      ]
    },
    "1508": {
      "op": "box_put",
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1509": {
      "retsub": true,
      "op": "retsub"
    },
    "1510": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdrawable",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "adminWithdrawable",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1513": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "assetId#0 (copy)"
      ]
    },
    "1515": {
      "op": "itob",
      "defined_out": [
        "assetIdN#0"
      ],
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "1516": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetIdN#0",
        "assetId#0 (copy)"
      ]
    },
    "1518": {
      "op": "bnz adminWithdrawable_else_body@2",
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "1521": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%1#0"
      ]
    },
    "1523": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "assetIdN#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1525": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0"
      ]
    },
    "1526": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%2#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "tmp%2#0"
      ]
    },
    "1528": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "assetIdN#0",
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1530": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "1531": {
      "op": "-",
      "defined_out": [
        "assetIdN#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%3#0"
      ]
    },
    "1532": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%3#0",
        "\"d\""
      ]
    },
    "1533": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%3#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "1535": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "1536": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1537": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%0#0"
      ]
    },
    "1538": {
      "op": "btoi",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1539": {
      "op": "-",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1540": {
      "retsub": true,
      "op": "retsub"
    },
    "1541": {
      "block": "adminWithdrawable_else_body@2",
      "stack_in": [
        "assetIdN#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%7#0"
      ]
    },
    "1543": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%7#0",
        "assetId#0 (copy)"
      ]
    },
    "1545": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "1547": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetIdN#0",
        "value%2#0"
      ]
    },
    "1548": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "\"d\""
      ]
    },
    "1549": {
      "op": "uncover 2",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "1551": {
      "op": "concat",
      "defined_out": [
        "tmp%8#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%8#0"
      ]
    },
    "1552": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1553": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0"
      ]
    },
    "1554": {
      "op": "btoi",
      "defined_out": [
        "tmp%9#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%9#0"
      ]
    },
    "1555": {
      "op": "-",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1556": {
      "retsub": true,
      "op": "retsub"
    },
    "1557": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.adminWithdraw",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "adminWithdraw",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1560": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1562": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1564": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1565": {
      "error": "Only deployer of this app can withdraw",
      "op": "assert // Only deployer of this app can withdraw",
      "stack_out": []
    },
    "1566": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "assetId#0 (copy)"
      ]
    },
    "1568": {
      "op": "itob",
      "defined_out": [
        "assetIdN#0"
      ],
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "1569": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetIdN#0",
        "assetId#0 (copy)"
      ]
    },
    "1571": {
      "op": "bnz adminWithdraw_else_body@2",
      "stack_out": [
        "assetIdN#0"
      ]
    },
    "1574": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%4#0"
      ]
    },
    "1576": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "assetIdN#0",
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1578": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0"
      ]
    },
    "1579": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "assetIdN#0",
        "tmp%5#0",
        "value%0#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "tmp%5#0"
      ]
    },
    "1581": {
      "op": "acct_params_get AcctMinBalance",
      "defined_out": [
        "assetIdN#0",
        "check%1#0",
        "value%0#0",
        "value%1#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0",
        "check%1#0"
      ]
    },
    "1583": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "assetIdN#0",
        "value%0#0",
        "value%1#0"
      ]
    },
    "1584": {
      "op": "-",
      "defined_out": [
        "assetIdN#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%6#0"
      ]
    },
    "1585": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%6#0",
        "\"d\""
      ]
    },
    "1586": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "1588": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1589": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1590": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%0#0"
      ]
    },
    "1591": {
      "op": "btoi",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "1592": {
      "op": "-",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1593": {
      "retsub": true,
      "op": "retsub"
    },
    "1594": {
      "block": "adminWithdraw_else_body@2",
      "stack_in": [
        "assetIdN#0"
      ],
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%10#0"
      ]
    },
    "1596": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "tmp%10#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "tmp%10#0",
        "assetId#0 (copy)"
      ]
    },
    "1598": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%2#0",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "check%2#0"
      ]
    },
    "1600": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetIdN#0",
        "value%2#0"
      ]
    },
    "1601": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "value%2#0"
      ],
      "stack_out": [
        "assetIdN#0",
        "value%2#0",
        "\"d\""
      ]
    },
    "1602": {
      "op": "uncover 2",
      "defined_out": [
        "\"d\"",
        "assetIdN#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "\"d\"",
        "assetIdN#0"
      ]
    },
    "1604": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%11#0"
      ]
    },
    "1605": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1606": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "value%2#0",
        "maybe_value%1#0"
      ]
    },
    "1607": {
      "op": "btoi",
      "defined_out": [
        "tmp%12#0",
        "value%2#0"
      ],
      "stack_out": [
        "value%2#0",
        "tmp%12#0"
      ]
    },
    "1608": {
      "op": "-",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1609": {
      "retsub": true,
      "op": "retsub"
    },
    "1610": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow.sendOnlineKeyRegistration",
      "params": {
        "voteKey#0": "bytes",
        "selectionKey#0": "bytes",
        "stateProofKey#0": "bytes",
        "voteFirst#0": "uint64",
        "voteLast#0": "uint64",
        "voteKeyDilution#0": "uint64",
        "fee#0": "uint64"
      },
      "block": "sendOnlineKeyRegistration",
      "stack_in": [],
      "op": "proto 7 1"
    },
    "1613": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1615": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1617": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1618": {
      "error": "Only creator can use this method",
      "op": "assert // Only creator can use this method",
      "stack_out": []
    },
    "1619": {
      "op": "itxn_begin"
    },
    "1620": {
      "op": "frame_dig -7",
      "defined_out": [
        "voteKey#0 (copy)"
      ],
      "stack_out": [
        "voteKey#0 (copy)"
      ]
    },
    "1622": {
      "op": "itxn_field VotePK",
      "stack_out": []
    },
    "1624": {
      "op": "frame_dig -3",
      "defined_out": [
        "voteLast#0 (copy)"
      ],
      "stack_out": [
        "voteLast#0 (copy)"
      ]
    },
    "1626": {
      "op": "itxn_field VoteLast",
      "stack_out": []
    },
    "1628": {
      "op": "frame_dig -2",
      "defined_out": [
        "voteKeyDilution#0 (copy)"
      ],
      "stack_out": [
        "voteKeyDilution#0 (copy)"
      ]
    },
    "1630": {
      "op": "itxn_field VoteKeyDilution",
      "stack_out": []
    },
    "1632": {
      "op": "frame_dig -4",
      "defined_out": [
        "voteFirst#0 (copy)"
      ],
      "stack_out": [
        "voteFirst#0 (copy)"
      ]
    },
    "1634": {
      "op": "itxn_field VoteFirst",
      "stack_out": []
    },
    "1636": {
      "op": "frame_dig -5",
      "defined_out": [
        "stateProofKey#0 (copy)"
      ],
      "stack_out": [
        "stateProofKey#0 (copy)"
      ]
    },
    "1638": {
      "op": "itxn_field StateProofPK",
      "stack_out": []
    },
    "1640": {
      "op": "frame_dig -6",
      "defined_out": [
        "selectionKey#0 (copy)"
      ],
      "stack_out": [
        "selectionKey#0 (copy)"
      ]
    },
    "1642": {
      "op": "itxn_field SelectionPK",
      "stack_out": []
    },
    "1644": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2"
      ],
      "stack_out": [
        "2"
      ]
    },
    "1646": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1648": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee#0 (copy)"
      ],
      "stack_out": [
        "fee#0 (copy)"
      ]
    },
    "1650": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1652": {
      "op": "itxn_submit"
    },
    "1653": {
      "op": "itxn TxID",
      "defined_out": [
        "itxnResult.TxID#0"
      ],
      "stack_out": [
        "itxnResult.TxID#0"
      ]
    },
    "1655": {
      "retsub": true,
      "op": "retsub"
    },
    "1656": {
      "subroutine": "smart_contracts/escrow/contract.algo.ts::Escrow._send",
      "params": {
        "receiver#0": "bytes",
        "assetId#0": "uint64",
        "amount#0": "uint64"
      },
      "block": "_send",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1659": {
      "op": "intc_1 // 0"
    },
    "1660": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)",
        "prevDeposits#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "assetId#0 (copy)"
      ]
    },
    "1662": {
      "op": "itob",
      "defined_out": [
        "prevDeposits#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tokenIdN#0"
      ]
    },
    "1663": {
      "op": "bytec_0 // \"d\"",
      "defined_out": [
        "\"d\"",
        "prevDeposits#0",
        "tokenIdN#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tokenIdN#0",
        "\"d\""
      ]
    },
    "1664": {
      "op": "swap",
      "stack_out": [
        "prevDeposits#0",
        "\"d\"",
        "tokenIdN#0"
      ]
    },
    "1665": {
      "op": "concat",
      "defined_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1666": {
      "op": "dup",
      "defined_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1667": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1668": {
      "op": "bury 1",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1670": {
      "op": "bz _send_after_if_else@2",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1673": {
      "op": "frame_dig 1",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1675": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1676": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "1677": {
      "op": "btoi",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "prevDeposits#0"
      ]
    },
    "1678": {
      "op": "frame_bury 0",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1680": {
      "block": "_send_after_if_else@2",
      "stack_in": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "prevDeposits#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "prevDeposits#0"
      ]
    },
    "1682": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "prevDeposits#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "prevDeposits#0",
        "amount#0 (copy)"
      ]
    },
    "1684": {
      "op": "-",
      "defined_out": [
        "prevDeposits#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "to_encode%0#0"
      ]
    },
    "1685": {
      "op": "itob",
      "defined_out": [
        "prevDeposits#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1686": {
      "op": "frame_dig 1",
      "defined_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "val_as_bytes%1#0",
        "tmp%0#0"
      ]
    },
    "1688": {
      "op": "swap",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "1689": {
      "op": "box_put",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1690": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "assetId#0 (copy)"
      ]
    },
    "1692": {
      "op": "bnz _send_else_body@5",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1695": {
      "op": "itxn_begin"
    },
    "1696": {
      "op": "frame_dig -3",
      "defined_out": [
        "prevDeposits#0",
        "receiver#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "receiver#0 (copy)"
      ]
    },
    "1698": {
      "op": "itxn_field Receiver",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1700": {
      "op": "frame_dig -1",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "amount#0 (copy)"
      ]
    },
    "1702": {
      "op": "itxn_field Amount",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1704": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "1"
      ]
    },
    "1705": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1707": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1708": {
      "op": "itxn_field Fee",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1710": {
      "op": "itxn_submit"
    },
    "1711": {
      "retsub": true,
      "op": "retsub"
    },
    "1712": {
      "block": "_send_else_body@5",
      "stack_in": [
        "prevDeposits#0",
        "tmp%0#0"
      ],
      "op": "itxn_begin"
    },
    "1713": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "assetId#0 (copy)"
      ]
    },
    "1715": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1717": {
      "op": "frame_dig -3",
      "defined_out": [
        "receiver#0 (copy)"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "receiver#0 (copy)"
      ]
    },
    "1719": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1721": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "amount#0 (copy)"
      ]
    },
    "1723": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1725": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "4"
      ]
    },
    "1727": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1729": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0",
        "0"
      ]
    },
    "1730": {
      "op": "itxn_field Fee",
      "stack_out": [
        "prevDeposits#0",
        "tmp%0#0"
      ]
    },
    "1732": {
      "op": "itxn_submit"
    },
    "1733": {
      "retsub": true,
      "op": "retsub"
    }
  }
}